{
    "project": {},
    "files": {
        "assets\\js\\libs\\almond.js": {
            "name": "assets\\js\\libs\\almond.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\js\\libs\\jquery.js": {
            "name": "assets\\js\\libs\\jquery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\js\\libs\\lodash.js": {
            "name": "assets\\js\\libs\\lodash.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "assets\\js\\libs\\require.js": {
            "name": "assets\\js\\libs\\require.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "dist\\debug\\require.js": {
            "name": "dist\\debug\\require.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\jasmine\\vendor\\jasmine.js": {
            "name": "test\\jasmine\\vendor\\jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "test\\qunit\\vendor\\qunit.js": {
            "name": "test\\qunit\\vendor\\qunit.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {},
    "classitems": [
        {
            "file": "assets\\js\\libs\\almond.js",
            "line": 1,
            "description": "almond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\almond.js",
            "line": 20,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\almond.js",
            "line": 179,
            "description": "Makes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\almond.js",
            "line": 359,
            "description": "Just drops the config on the floor, but returns req in case\nthe config return value is used.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\jquery.js",
            "line": 3987,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 11,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 15,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 22,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 25,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 28,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 31,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 34,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 37,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 42,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 45,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 48,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 55,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 58,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 61,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 64,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 70,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 73,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 93,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 104,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 108,
            "description": "Detect the JScript [[DontEnum]] bug:\n\nIn IE < 9 an objects own properties, shadowing non-enumerable ones, are\nmade non-enumerable as well.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 116,
            "description": "Detect if `Array#shift` and `Array#splice` augment array-like objects\nincorrectly:\n\nFirefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`\nand `splice()` functions that fail to remove the last element, `value[0]`,\nof array-like objects even though the `length` property is set to `0`.\nThe `shift()` method is buggy in IE 8 compatibility mode, while `splice()`\nis buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 128,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 131,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 148,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 151,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 154,
            "description": "Detect lack of support for accessing string characters by index:\n\nIE < 8 can't access characters by index and IE 8 can only access\ncharacters by index on string literals.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 162,
            "description": "Detect if a node's [[Class]] is unresolvable (IE < 9)\nand that the JS engine won't error when attempting to coerce an object to\na string without a `toString` property value of `typeof` \"function\".",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 180,
            "description": "Detect if sourceURL syntax is usable without erroring:\n\nThe JS engine in Adobe products, like InDesign, will throw a syntax error\nwhen it encounters a single line comment beginning with the `@` symbol.\n\nThe JS engine in Narwhal will generate the function `function anonymous(){//}`\nand throw a syntax error.\n\nAvoid comments beginning `@` symbols in IE because they are part of its\nnon-standard conditional compilation support.\nhttp://msdn.microsoft.com/en-us/library/121hztk3(v=vs.94).aspx",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 197,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 203,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 210,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 221,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 234,
            "description": "The `lodash` function.",
            "name": "_",
            "is_constructor": 1,
            "category": [
                "Chaining"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to wrap in a `lodash` instance.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns a `lodash` instance.",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 255,
            "description": "By default, the template delimiters used by Lo-Dash are similar to those in\nembedded Ruby (ERB). Change the following template settings to use alternative\ndelimiters.",
            "static": 1,
            "memberof": "_",
            "type": "Object",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 266,
            "description": "Used to detect `data` property values to be HTML-escaped.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "RegExp",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 275,
            "description": "Used to detect code to be evaluated.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "RegExp",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 284,
            "description": "Used to detect `data` property values to inject.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "RegExp",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 293,
            "description": "Used to reference the data object in the template text.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "String",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 305,
            "description": "The template used to create iterator functions.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data object used to populate the text.",
                    "type": "Obect"
                }
            ],
            "return": {
                "description": "Returns the interpolated text.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 427,
            "description": "Reusable iterator options shared by\n`countBy`, `every`, `filter`, `find`, `forEach`, `forIn`, `forOwn`, `groupBy`,\n`map`, `reject`, `some`, and `sortBy`.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 438,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 447,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 453,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 465,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 471,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 476,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 483,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 496,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 514,
            "description": "Creates a function optimized for searching large arrays for a given `value`,\nstarting at `fromIndex`, using strict equality for comparisons, i.e. `===`.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "array",
                    "description": "The array to search.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to search for.",
                    "type": "Mixed"
                },
                {
                    "name": "fromIndex",
                    "description": "The index to start searching from.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "largeSize",
                    "description": "The length at which an array is considered large.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "30"
                }
            ],
            "return": {
                "description": "Returns `true` if `value` is found, else `false`.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 551,
            "description": "Used by `sortBy` to compare transformed `collection` values, stable sorting\nthem in ascending order.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "The object to compare to `b`.",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The object to compare to `a`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the sort order indicator of `1` or `-1`.",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 580,
            "description": "Creates a function that, when called, invokes `func` with the `this`\nbinding of `thisArg` and prepends any `partailArgs` to the arguments passed\nto the bound function.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "The function to bind or the method name.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `func`.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "partialArgs",
                    "description": "An array of arguments to be partially applied.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the new bound function.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 632,
            "description": "Produces an iteration callback bound to an optional `thisArg`. If `func` is\na property name, the callback will return the property value for a given element.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "The function called per\niteration or property name to query.",
                    "type": "Function|String",
                    "optional": true,
                    "optdefault": "identity|property"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a callback function.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 659,
            "description": "Creates compiled iteration functions. The iteration function will be created\nto iterate over only objects if the first argument of `options.args` is\n\"object\" or `options.inLoop.array` is falsey.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "[options1,",
                    "description": "options2, ...] The compile options objects.\n\n useHas - A boolean to specify using `hasOwnProperty` checks in the object loop.\n\n useStrict - A boolean to specify including the \"use strict\" directive.\n\n args - A string of comma separated arguments the iteration function will accept.\n\n init - A string to specify the initial value of the `result` variable.\n\n top - A string of code to execute before the iteration branches.\n\n beforeLoop - A string or object containing an \"array\" or \"object\" property\n  of code to execute before the array or object loops.\n\n inLoop - A string or object containing an \"array\" or \"object\" property\n  of code to execute in the array or object loops.\n\n bottom - A string of code to execute after the iteration branches but\n  before the `result` is returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the compiled function.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 746,
            "description": "Used by `template` to escape characters for inclusion in compiled\nstring literals.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "match",
                    "description": "The matched character to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the escaped character.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 758,
            "description": "Used by `escape` to convert characters to HTML entities.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "match",
                    "description": "The matched character to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the escaped character.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 769,
            "description": "A no-operation function.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 778,
            "description": "Used by `unescape` to convert HTML entities to characters.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "match",
                    "description": "The matched character to unescape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the unescaped character.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 791,
            "description": "Creates an object composed of the inverted keys and values of the given `object`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to invert.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the created inverted object.",
                "type": "Object"
            },
            "example": [
                "\n\n _.invert({ 'first': 'Moe', 'second': 'Larry', 'third': 'Curly' });\n// => { 'Moe': 'first', 'Larry': 'second', 'Curly': 'third' } (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 810,
            "description": "Checks if `value` is an `arguments` object.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is an `arguments` object, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n(function() { return _.isArguments(arguments); })(1, 2, 3);\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 836,
            "description": "Checks if `value` is an array.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is an array, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n(function() { return _.isArray(arguments); })();\n// => false\n\n_.isArray([1, 2, 3]);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 856,
            "description": "Checks if `value` is a function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a function, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isFunction(_);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 879,
            "description": "Checks if a given `value` is an object created by the `Object` constructor.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if `value` is a plain object, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\nfunction Stooge(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\n_.isPlainObject(new Stooge('moe', 40));\n// false\n\n_.isPlainObject([1, 2, 3]);\n// false\n\n_.isPlainObject({ 'name': 'moe', 'age': 40 });\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 915,
            "description": "A fallback implementation of `isPlainObject` that checks if a given `value`\nis an object created by the `Object` constructor, assuming objects created\nby the `Object` constructor have no inherited enumerable properties and that\nthere are no `Object.prototype` extensions.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if `value` is a plain object, else `false`.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 958,
            "description": "A shim implementation of `Object.keys` that produces an array of the given\nobject's own enumerable property names.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property names.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 972,
            "description": "Used to convert characters to HTML entities:\n\nThough the `>` character is escaped for symmetry, characters like `>` and `/`\ndon't require escaping in HTML and have no special meaning unless they're part\nof a tag or an unquoted attribute value.\nhttp://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 988,
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 993,
            "description": "Creates a clone of `value`. If `deep` is `true`, all nested objects will\nalso be cloned otherwise they will be assigned by reference. Functions, DOM\nnodes, `arguments` objects, and objects created by constructors other than\n`Object` are **not** cloned.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to clone.",
                    "type": "Mixed"
                },
                {
                    "name": "deep",
                    "description": "A flag to indicate a deep clone.",
                    "type": "Boolean"
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `deep`.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[stackA=[]] Internally used to track traversed source objects.",
                    "type": "Array"
                },
                {
                    "name": "-",
                    "description": "[stackB=[]] Internally used to associate clones with their\n source counterparts.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the cloned `value`.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.clone({ 'name': 'moe' });\n// => { 'name': 'moe' }\n\nvar shallow = _.clone(stooges);\nshallow[0] === stooges[0];\n// => true\n\nvar deep = _.clone(stooges, true);\nshallow[0] === stooges[0];\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1094,
            "description": "Assigns enumerable properties of the default object(s) to the `destination`\nobject for all `destination` properties that resolve to `null`/`undefined`.\nOnce a property is set, additional defaults of the same property will be\nignored.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The destination object.",
                    "type": "Object"
                },
                {
                    "name": "[default1,",
                    "description": "default2, ...] The default objects.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the destination object.",
                "type": "Object"
            },
            "example": [
                "\n\nvar iceCream = { 'flavor': 'chocolate' };\n_.defaults(iceCream, { 'flavor': 'vanilla', 'sprinkles': 'rainbow' });\n// => { 'flavor': 'chocolate', 'sprinkles': 'rainbow' }"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1116,
            "description": "Assigns enumerable properties of the source object(s) to the `destination`\nobject. Subsequent sources will overwrite propery assignments of previous\nsources.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The destination object.",
                    "type": "Object"
                },
                {
                    "name": "[source1,",
                    "description": "source2, ...] The source objects.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the destination object.",
                "type": "Object"
            },
            "example": [
                "\n\n_.extend({ 'name': 'moe' }, { 'age': 40 });\n// => { 'name': 'moe', 'age': 40 }"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1134,
            "description": "Iterates over `object`'s own and inherited enumerable properties, executing\nthe `callback` for each property. The `callback` is bound to `thisArg` and\ninvoked with three arguments; (value, key, object). Callbacks may exit iteration\nearly by explicitly returning `false`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to iterate over.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `object`.",
                "type": "Object"
            },
            "example": [
                "\n\nfunction Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.bark = function() {\n  alert('Woof, woof!');\n};\n\n_.forIn(new Dog('Dagny'), function(value, key) {\n  alert(key);\n});\n// => alerts 'name' and 'bark' (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1166,
            "description": "Iterates over `object`'s own enumerable properties, executing the `callback`\nfor each property. The `callback` is bound to `thisArg` and invoked with three\narguments; (value, key, object). Callbacks may exit iteration early by explicitly\nreturning `false`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to iterate over.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `object`.",
                "type": "Object"
            },
            "example": [
                "\n\n_.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n  alert(key);\n});\n// => alerts '0', '1', and 'length' (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1188,
            "description": "Creates a sorted array of all enumerable properties, own and inherited,\nof `object` that have function values.",
            "static": 1,
            "memberof": "_",
            "alias": "methods",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property names that have function values.",
                "type": "Array"
            },
            "example": [
                "\n\n_.functions(_);\n// => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1211,
            "description": "Checks if the specified object `property` exists and is a direct property,\ninstead of an inherited property.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The property to check for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `true` if key is a direct property, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1230,
            "description": "Checks if `value` is a boolean (`true` or `false`) value.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a boolean value, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isBoolean(null);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1247,
            "description": "Checks if `value` is a date.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a date, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isDate(new Date);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1264,
            "description": "Checks if `value` is a DOM element.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a DOM element, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isElement(document.body);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1281,
            "description": "Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\nlength of `0` and objects with no own enumerable properties are considered\n\"empty\".",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to inspect.",
                    "type": "Array|Object|String"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is empty, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({});\n// => true\n\n_.isEmpty('');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1318,
            "description": "Performs a deep comparison between two values to determine if they are\nequivalent to each other.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "a",
                    "description": "The value to compare.",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "The other value to compare.",
                    "type": "Mixed"
                },
                {
                    "name": "-",
                    "description": "[stackA=[]] Internally used track traversed `a` objects.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[stackB=[]] Internally used track traversed `b` objects.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns `true` if the values are equvalent, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\nvar moe = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\nvar clone = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\n\nmoe == clone;\n// => false\n\n_.isEqual(moe, clone);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1475,
            "description": "Checks if `value` is a finite number.\n\nNote: This is not the same as native `isFinite`, which will return true for\nbooleans and other values. See http://es5.github.com/#x15.1.2.5.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a finite number, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isFinite(-101);\n// => true\n\n_.isFinite('10');\n// => false\n\n_.isFinite(Infinity);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1502,
            "description": "Checks if `value` is the language type of Object.\n(e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is an object, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(1);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1530,
            "description": "Checks if `value` is `NaN`.\n\nNote: This is not the same as native `isNaN`, which will return true for\n`undefined` and other values. See http://es5.github.com/#x15.1.2.4.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is `NaN`, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1562,
            "description": "Checks if `value` is `null`.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is `null`, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isNull(null);\n// => true\n\n_.isNull(undefined);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1583,
            "description": "Checks if `value` is a number.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a number, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isNumber(8.4 * 5);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1600,
            "description": "Checks if `value` is a regular expression.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a regular expression, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isRegExp(/moe/);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1617,
            "description": "Checks if `value` is a string.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a string, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isString('moe');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1634,
            "description": "Checks if `value` is `undefined`.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is `undefined`, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isUndefined(void 0);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1652,
            "description": "Creates an array composed of the own enumerable property names of `object`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property names.",
                "type": "Array"
            },
            "example": [
                "\n\n_.keys({ 'one': 1, 'two': 2, 'three': 3 });\n// => ['one', 'two', 'three'] (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1677,
            "description": "Merges enumerable properties of the source object(s) into the `destination`\nobject. Subsequent sources will overwrite propery assignments of previous\nsources.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The destination object.",
                    "type": "Object"
                },
                {
                    "name": "[source1,",
                    "description": "source2, ...] The source objects.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[indicator] Internally used to indicate that the `stack`\n argument is an array of traversed objects instead of another source object.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[stackA=[]] Internally used to track traversed source objects.",
                    "type": "Array"
                },
                {
                    "name": "-",
                    "description": "[stackB=[]] Internally used to associate clones with their\n source counterparts.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the destination object.",
                "type": "Object"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe' },\n  { 'name': 'larry' }\n];\n\nvar ages = [\n  { 'age': 40 },\n  { 'age': 50 }\n];\n\n_.merge(stooges, ages);\n// => [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1740,
            "description": "Creates a shallow clone of `object` excluding the specified properties.\nProperty names may be specified as individual arguments or as arrays of\nproperty names. If `callback` is passed, it will be executed for each property\nin the `object`, omitting the properties `callback` returns truthy for. The\n`callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The source object.",
                    "type": "Object"
                },
                {
                    "name": "callback|[prop1,",
                    "description": "prop2, ...] The properties to omit\n or the function called per iteration.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object without the omitted properties.",
                "type": "Object"
            },
            "example": [
                "\n\n_.omit({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'userid');\n// => { 'name': 'moe', 'age': 40 }\n\n_.omit({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {\n  return key.charAt(0) == '_';\n});\n// => { 'name': 'moe' }"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1767,
            "description": "Creates a two dimensional array of the given object's key-value pairs,\ni.e. `[[key1, value1], [key2, value2]]`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns new array of key-value pairs.",
                "type": "Array"
            },
            "example": [
                "\n\n_.pairs({ 'moe': 30, 'larry': 40, 'curly': 50 });\n// => [['moe', 30], ['larry', 40], ['curly', 50]] (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1787,
            "description": "Creates a shallow clone of `object` composed of the specified properties.\nProperty names may be specified as individual arguments or as arrays of\nproperty names. If `callback` is passed, it will be executed for each property\nin the `object`, picking the properties `callback` returns truthy for. The\n`callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The source object.",
                    "type": "Object"
                },
                {
                    "name": "callback|[prop1,",
                    "description": "prop2, ...] The properties to pick\n or the function called per iteration.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object composed of the picked properties.",
                "type": "Object"
            },
            "example": [
                "\n\n_.pick({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'name', 'age');\n// => { 'name': 'moe', 'age': 40 }\n\n_.pick({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {\n  return key.charAt(0) != '_';\n});\n// => { 'name': 'moe' }"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1829,
            "description": "Creates an array composed of the own enumerable property values of `object`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property values.",
                "type": "Array"
            },
            "example": [
                "\n\n_.values({ 'one': 1, 'two': 2, 'three': 3 });\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1850,
            "description": "Checks if a given `target` element is present in a `collection` using strict\nequality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "alias": "include",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "target",
                    "description": "The value to check for.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `target` element is found, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.contains([1, 2, 3], 3);\n// => true\n\n_.contains({ 'name': 'moe', 'age': 40 }, 'moe');\n// => true\n\n_.contains('curly', 'ur');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1882,
            "description": "Creates an object composed of keys returned from running each element of\n`collection` through a `callback`. The corresponding value of each key is\nthe number of times the key was returned by `callback`. The `callback` is\nbound to `thisArg` and invoked with three arguments; (value, index|key, collection).\nThe `callback` argument may also be the name of a property to count by (e.g. 'length').",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback|property",
                    "description": "The function called per iteration\n or property name to count by.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the composed aggregate object.",
                "type": "Object"
            },
            "example": [
                "\n\n_.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n// => { '4': 1, '6': 2 }\n\n_.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n// => { '4': 1, '6': 2 }\n\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1910,
            "description": "Checks if the `callback` returns a truthy value for **all** elements of a\n`collection`. The `callback` is bound to `thisArg` and invoked with three\narguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "all",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `true` if all elements pass the callback check,\n else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.every([true, 1, null, 'yes'], Boolean);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1931,
            "description": "Examines each element in a `collection`, returning an array of all elements\nthe `callback` returns truthy for. The `callback` is bound to `thisArg` and\ninvoked with three arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "select",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of elements that passed the callback check.",
                "type": "Array"
            },
            "example": [
                "\n\nvar evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n// => [2, 4, 6]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1951,
            "description": "Examines each element in a `collection`, returning the first one the `callback`\nreturns truthy for. The function returns as soon as it finds an acceptable\nelement, and does not iterate over the entire `collection`. The `callback` is\nbound to `thisArg` and invoked with three arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "detect",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the element that passed the callback check,\n else `undefined`.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 1976,
            "description": "Iterates over a `collection`, executing the `callback` for each element in\nthe `collection`. The `callback` is bound to `thisArg` and invoked with three\narguments; (value, index|key, collection). Callbacks may exit iteration early\nby explicitly returning `false`.",
            "static": 1,
            "memberof": "_",
            "alias": "each",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `collection`.",
                "type": "Array|Object|String"
            },
            "example": [
                "\n\n_([1, 2, 3]).forEach(alert).join(',');\n// => alerts each number and returns '1,2,3'\n\n_.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);\n// => alerts each number (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2000,
            "description": "Creates an object composed of keys returned from running each element of\n`collection` through a `callback`. The corresponding value of each key is an\narray of elements passed to `callback` that returned the key. The `callback`\nis bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\nThe `callback` argument may also be the name of a property to count by (e.g. 'length').",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback|property",
                    "description": "The function called per iteration\n or property name to group by.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the composed aggregate object.",
                "type": "Object"
            },
            "example": [
                "\n\n_.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n// => { '4': [4.2], '6': [6.1, 6.4] }\n\n_.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n// => { '4': [4.2], '6': [6.1, 6.4] }\n\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2032,
            "description": "Invokes the method named by `methodName` on each element in the `collection`,\nreturning an array of the results of each invoked method. Additional arguments\nwill be passed to each invoked method. If `methodName` is a function it will\nbe invoked for, and `this` bound to, each element in the `collection`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "methodName",
                    "description": "The name of the method to invoke or\n the function invoked per iteration.",
                    "type": "Function|String"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to invoke the method with.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns a new array of the results of each invoked method.",
                "type": "Array"
            },
            "example": [
                "\n\n_.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\n_.invoke([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2068,
            "description": "Creates an array of values by running each element in the `collection`\nthrough a `callback`. The `callback` is bound to `thisArg` and invoked with\nthree arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "collect",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of the results of each `callback` execution.",
                "type": "Array"
            },
            "example": [
                "\n\n_.map([1, 2, 3], function(num) { return num * 3; });\n// => [3, 6, 9]\n\n_.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n// => [3, 6, 9] (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2091,
            "description": "Retrieves the maximum value of an `array`. If `callback` is passed,\nit will be executed for each value in the `array` to generate the\ncriterion by which the value is ranked. The `callback` is bound to\n`thisArg` and invoked with three arguments; (value, index, collection).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the maximum value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.max(stooges, function(stooge) { return stooge.age; });\n// => { 'name': 'curly', 'age': 60 };"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2140,
            "description": "Retrieves the minimum value of an `array`. If `callback` is passed,\nit will be executed for each value in the `array` to generate the\ncriterion by which the value is ranked. The `callback` is bound to `thisArg`\nand invoked with three arguments; (value, index, collection).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the minimum value.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.min([10, 5, 100, 2, 1000]);\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2183,
            "description": "Retrieves the value of a specified property from all elements in\nthe `collection`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "property",
                    "description": "The property to pluck.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a new array of property values.",
                "type": "Array"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.pluck(stooges, 'name');\n// => ['moe', 'larry', 'curly']"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2212,
            "description": "Boils down a `collection` to a single value. The initial state of the\nreduction is `accumulator` and each successive step of it should be returned\nby the `callback`. The `callback` is bound to `thisArg` and invoked with 4\narguments; for arrays they are (accumulator, value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "foldl, inject",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "accumulator",
                    "description": "Initial value of the accumulator.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the accumulated value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar sum = _.reduce([1, 2, 3], function(memo, num) { return memo + num; });\n// => 6"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2251,
            "description": "The right-associative version of `_.reduce`.",
            "static": 1,
            "memberof": "_",
            "alias": "foldr",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "accumulator",
                    "description": "Initial value of the accumulator.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the accumulated value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar list = [[0, 1], [2, 3], [4, 5]];\nvar flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n// => [4, 5, 2, 3, 0, 1]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2289,
            "description": "The opposite of `_.filter`, this method returns the values of a\n`collection` that `callback` does **not** return truthy for.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of elements that did **not** pass the\n callback check.",
                "type": "Array"
            },
            "example": [
                "\n\nvar odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n// => [1, 3, 5]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2310,
            "description": "Creates an array of shuffled `array` values, using a version of the\nFisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to shuffle.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new shuffled collection.",
                "type": "Array"
            },
            "example": [
                "\n\n_.shuffle([1, 2, 3, 4, 5, 6]);\n// => [4, 1, 6, 3, 5, 2]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2336,
            "description": "Gets the size of the `collection` by returning `collection.length` for arrays\nand array-like objects or the number of own enumerable properties for objects.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to inspect.",
                    "type": "Array|Object|String"
                }
            ],
            "return": {
                "description": "Returns `collection.length` or number of own enumerable properties.",
                "type": "Number"
            },
            "example": [
                "\n\n_.size([1, 2]);\n// => 2\n\n_.size({ 'one': 1, 'two': 2, 'three': 3 });\n// => 3\n\n_.size('curly');\n// => 5"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2361,
            "description": "Checks if the `callback` returns a truthy value for **any** element of a\n`collection`. The function returns as soon as it finds passing value, and\ndoes not iterate over the entire `collection`. The `callback` is bound to\n`thisArg` and invoked with three arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "any",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `true` if any element passes the callback check,\n else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.some([null, 0, 'yes', false]);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2386,
            "description": "Creates an array, stable sorted in ascending order by the results of\nrunning each element of `collection` through a `callback`. The `callback`\nis bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\nThe `callback` argument may also be the name of a property to sort by (e.g. 'length').",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback|property",
                    "description": "The function called per iteration\n or property name to sort by.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of sorted elements.",
                "type": "Array"
            },
            "example": [
                "\n\n_.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n// => [3, 1, 2]\n\n_.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n// => [3, 1, 2]\n\n_.sortBy(['larry', 'brendan', 'moe'], 'length');\n// => ['moe', 'larry', 'brendan']"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2434,
            "description": "Converts the `collection`, to an array.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to convert.",
                    "type": "Array|Object|String"
                }
            ],
            "return": {
                "description": "Returns the new converted array.",
                "type": "Array"
            },
            "example": [
                "\n\n(function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n// => [2, 3, 4]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2460,
            "description": "Examines each element in a `collection`, returning an array of all elements\nthat contain the given `properties`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "properties",
                    "description": "The object of properties/values to filter by.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of elements that contain the given `properties`.",
                "type": "Array"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.where(stooges, { 'age': 40 });\n// => [{ 'name': 'moe', 'age': 40 }]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2497,
            "description": "Creates an array with all falsey values of `array` removed. The values\n`false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to compact.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new filtered array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2525,
            "description": "Creates an array of `array` elements not present in the other arrays\nusing strict equality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to process.",
                    "type": "Array"
                },
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to check.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of `array` elements not present in the\n other arrays.",
                "type": "Array"
            },
            "example": [
                "\n\n_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n// => [1, 3, 4]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2560,
            "description": "Gets the first element of the `array`. Pass `n` to return the first `n`\nelements of the `array`.",
            "static": 1,
            "memberof": "_",
            "alias": "head, take",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the first element or an array of the first `n`\n elements of `array`.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.first([5, 4, 3, 2, 1]);\n// => 5"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2585,
            "description": "Flattens a nested array (the nesting can be to any depth). If `shallow` is\ntruthy, `array` will only be flattened a single level.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to compact.",
                    "type": "Array"
                },
                {
                    "name": "shallow",
                    "description": "A flag to indicate only flattening a single level.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns a new flattened array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.flatten([1, [2], [3, [[4]]]]);\n// => [1, 2, 3, 4];\n\n_.flatten([1, [2], [3, [[4]]]], true);\n// => [1, 2, 3, [[4]]];"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2621,
            "description": "Gets the index at which the first occurrence of `value` is found using\nstrict equality for comparisons, i.e. `===`. If the `array` is already\nsorted, passing `true` for `fromIndex` will run a faster binary search.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to search.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to search for.",
                    "type": "Mixed"
                },
                {
                    "name": "fromIndex",
                    "description": "The index to start searching from or\n `true` to perform a binary search on a sorted `array`.",
                    "type": "Boolean|Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Returns the index of the matched value or `-1`.",
                "type": "Number"
            },
            "example": [
                "\n\n_.indexOf([1, 2, 3, 1, 2, 3], 2);\n// => 1\n\n_.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// => 4\n\n_.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2663,
            "description": "Gets all but the last element of `array`. Pass `n` to exclude the last `n`\nelements from the result.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns all but the last element or `n` elements of `array`.",
                "type": "Array"
            },
            "example": [
                "\n\n_.initial([3, 2, 1]);\n// => [3, 2]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2686,
            "description": "Computes the intersection of all the passed-in arrays using strict equality\nfor comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to process.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of unique elements, in order, that are\n present in **all** of the arrays.",
                "type": "Array"
            },
            "example": [
                "\n\n_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n// => [1, 2]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2722,
            "description": "Gets the last element of the `array`. Pass `n` to return the last `n`\nelements of the `array`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the last element or an array of the last `n`\n elements of `array`.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.last([3, 2, 1]);\n// => 1"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2747,
            "description": "Gets the index at which the last occurrence of `value` is found using\nstrict equality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to search.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to search for.",
                    "type": "Mixed"
                },
                {
                    "name": "fromIndex",
                    "description": "The index to start searching from.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "array.length-1"
                }
            ],
            "return": {
                "description": "Returns the index of the matched value or `-1`.",
                "type": "Number"
            },
            "example": [
                "\n\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n// => 4\n\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// => 1"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2779,
            "description": "Creates an object composed from arrays of `keys` and `values`. Pass either\na single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or\ntwo arrays, one of `keys` and one of corresponding `values`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "keys",
                    "description": "The array of keys.",
                    "type": "Array"
                },
                {
                    "name": "values",
                    "description": "The array of values.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "["
                }
            ],
            "return": {
                "description": "Returns an object composed of the given keys and\n corresponding values.",
                "type": "Object"
            },
            "example": [
                "\n\n_.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n// => { 'moe': 30, 'larry': 40, 'curly': 50 }"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2812,
            "description": "Creates an array of numbers (positive and/or negative) progressing from\n`start` up to but not including `stop`. This method is a port of Python's\n`range()` function. See http://docs.python.org/library/functions.html#range.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "start",
                    "description": "The start of the range.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "end",
                    "description": "The end of the range.",
                    "type": "Number"
                },
                {
                    "name": "step",
                    "description": "The value to increment or descrement by.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "Returns a new range array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.range(10);\n// => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n_.range(1, 11);\n// => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n_.range(0, 30, 5);\n// => [0, 5, 10, 15, 20, 25]\n\n_.range(0, -10, -1);\n// => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n\n_.range(0);\n// => []"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2862,
            "description": "The opposite of `_.initial`, this method gets all but the first value of\n`array`. Pass `n` to exclude the first `n` values from the result.",
            "static": 1,
            "memberof": "_",
            "alias": "drop, tail",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns all but the first value or `n` values of `array`.",
                "type": "Array"
            },
            "example": [
                "\n\n_.rest([3, 2, 1]);\n// => [2, 1]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2886,
            "description": "Uses a binary search to determine the smallest index at which the `value`\nshould be inserted into `array` in order to maintain the sort order of the\nsorted `array`. If `callback` is passed, it will be executed for `value` and\neach element in `array` to compute their sort ranking. The `callback` is\nbound to `thisArg` and invoked with one argument; (value). The `callback`\nargument may also be the name of a property to order by.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to evaluate.",
                    "type": "Mixed"
                },
                {
                    "name": "callback",
                    "description": "The function called\n per iteration or property name to order by.",
                    "type": "Function|String",
                    "optional": true,
                    "optdefault": "identity|property"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the index at which the value should be inserted\n into `array`.",
                "type": "Number"
            },
            "example": [
                "\n\n_.sortedIndex([20, 30, 50], 40);\n// => 2\n\n_.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n// => 2\n\nvar dict = {\n  'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n};\n\n_.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n  return dict.wordToNumber[word];\n});\n// => 2\n\n_.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n  return this.wordToNumber[word];\n}, dict);\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2946,
            "description": "Computes the union of the passed-in arrays using strict equality for\ncomparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to process.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of unique values, in order, that are\n present in one or more of the arrays.",
                "type": "Array"
            },
            "example": [
                "\n\n_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n// => [1, 2, 3, 101, 10]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 2976,
            "description": "Creates a duplicate-value-free version of the `array` using strict equality\nfor comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\nfor `isSorted` will run a faster algorithm. If `callback` is passed, each\nelement of `array` is passed through a callback` before uniqueness is computed.\nThe `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).",
            "static": 1,
            "memberof": "_",
            "alias": "unique",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to process.",
                    "type": "Array"
                },
                {
                    "name": "isSorted",
                    "description": "A flag to indicate that the `array` is already sorted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a duplicate-value-free array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.uniq([1, 2, 1, 3, 1]);\n// => [1, 2, 3]\n\n_.uniq([1, 1, 2, 2, 3], true);\n// => [1, 2, 3]\n\n_.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });\n// => [1, 2, 3]\n\n_.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3032,
            "description": "Creates an array with all occurrences of the passed values removed using\nstrict equality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to filter.",
                    "type": "Array"
                },
                {
                    "name": "[value1,",
                    "description": "value2, ...] Values to remove.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns a new filtered array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n// => [2, 3, 4]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3062,
            "description": "Groups the elements of each array at their corresponding indexes. Useful for\nseparate data sources that are coordinated through matching array indexes.\nFor a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix\nin a similar fashion.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to process.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of grouped elements.",
                "type": "Array"
            },
            "example": [
                "\n\n_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);\n// => [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3091,
            "description": "Creates a function that is restricted to executing only after it is\ncalled `n` times.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "n",
                    "description": "The number of times the function must be called before\nit is executed.",
                    "type": "Number"
                },
                {
                    "name": "func",
                    "description": "The function to restrict.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new restricted function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar renderNotes = _.after(notes.length, render);\n_.forEach(notes, function(note) {\n  note.asyncSave({ 'success': renderNotes });\n});\n// `renderNotes` is run once, after all notes have saved"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3121,
            "description": "Creates a function that, when called, invokes `func` with the `this`\nbinding of `thisArg` and prepends any additional `bind` arguments to those\npassed to the bound function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to bind.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `func`.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to be partially applied.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the new bound function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar func = function(greeting) {\n  return greeting + ' ' + this.name;\n};\n\nfunc = _.bind(func, { 'name': 'moe' }, 'hi');\nfunc();\n// => 'hi moe'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3151,
            "description": "Binds methods on `object` to `object`, overwriting the existing method.\nIf no method names are provided, all the function properties of `object`\nwill be bound.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to bind and assign the bound methods to.",
                    "type": "Object"
                },
                {
                    "name": "[methodName1,",
                    "description": "methodName2, ...] Method names on the object to bind.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `object`.",
                "type": "Object"
            },
            "example": [
                "\n\nvar buttonView = {\n 'label': 'lodash',\n 'onClick': function() { alert('clicked: ' + this.label); }\n};\n\n_.bindAll(buttonView);\njQuery('#lodash_button').on('click', buttonView.onClick);\n// => When the button is clicked, `this.label` will have the correct value"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3191,
            "description": "Creates a function that is the composition of the passed functions,\nwhere each function consumes the return value of the function that follows.\nIn math terms, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "[func1,",
                    "description": "func2, ...] Functions to compose.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new composed function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar greet = function(name) { return 'hi: ' + name; };\nvar exclaim = function(statement) { return statement + '!'; };\nvar welcome = _.compose(exclaim, greet);\nwelcome('moe');\n// => 'hi: moe!'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3222,
            "description": "Creates a function that will delay the execution of `func` until after\n`wait` milliseconds have elapsed since the last time it was invoked. Pass\n`true` for `immediate` to cause debounce to invoke `func` on the leading,\ninstead of the trailing, edge of the `wait` timeout. Subsequent calls to\nthe debounced function will return the result of the last `func` call.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to debounce.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The number of milliseconds to delay.",
                    "type": "Number"
                },
                {
                    "name": "immediate",
                    "description": "A flag to indicate execution is on the leading\n edge of the timeout.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns the new debounced function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar lazyLayout = _.debounce(calculateLayout, 300);\njQuery(window).on('resize', lazyLayout);"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3270,
            "description": "Executes the `func` function after `wait` milliseconds. Additional arguments\nwill be passed to `func` when it is invoked.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to delay.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The number of milliseconds to delay execution.",
                    "type": "Number"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to invoke the function with.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the `setTimeout` timeout id.",
                "type": "Number"
            },
            "example": [
                "\n\nvar log = _.bind(console.log, console);\n_.delay(log, 1000, 'logged later');\n// => 'logged later' (Appears after one second.)"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3292,
            "description": "Defers executing the `func` function until the current call stack has cleared.\nAdditional arguments will be passed to `func` when it is invoked.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to defer.",
                    "type": "Function"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to invoke the function with.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the `setTimeout` timeout id.",
                "type": "Number"
            },
            "example": [
                "\n\n_.defer(function() { alert('deferred'); });\n// returns from the function before `alert` is called"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3312,
            "description": "Creates a function that, when called, invokes `object[methodName]` and\nprepends any additional `lateBind` arguments to those passed to the bound\nfunction. This method differs from `_.bind` by allowing bound functions to\nreference methods that will be redefined or don't yet exist.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object the method belongs to.",
                    "type": "Object"
                },
                {
                    "name": "methodName",
                    "description": "The method name.",
                    "type": "String"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to be partially applied.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the new bound function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar object = {\n  'name': 'moe',\n  'greet': function(greeting) {\n    return greeting + ' ' + this.name;\n  }\n};\n\nvar func = _.lateBind(object, 'greet', 'hi');\nfunc();\n// => 'hi moe'\n\nobject.greet = function(greeting) {\n  return greeting + ', ' + this.name + '!';\n};\n\nfunc();\n// => 'hi, moe!'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3349,
            "description": "Creates a function that memoizes the result of `func`. If `resolver` is\npassed, it will be used to determine the cache key for storing the result\nbased on the arguments passed to the memoized function. By default, the first\nargument passed to the memoized function is used as the cache key.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to have its output memoized.",
                    "type": "Function"
                },
                {
                    "name": "resolver",
                    "description": "A function used to resolve the cache key.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the new memoizing function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar fibonacci = _.memoize(function(n) {\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n});"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3377,
            "description": "Creates a function that is restricted to one execution. Repeat calls to\nthe function will return the value of the first call.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to restrict.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new restricted function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// Application is only created once."
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3410,
            "description": "Creates a function that, when called, invokes `func` with any additional\n`partial` arguments prepended to those passed to the new function. This method\nis similar to `bind`, except it does **not** alter the `this` binding.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to partially apply arguments to.",
                    "type": "Function"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to be partially applied.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the new partially applied function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar greet = function(greeting, name) { return greeting + ': ' + name; };\nvar hi = _.partial(greet, 'hi');\nhi('moe');\n// => 'hi: moe'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3432,
            "description": "Creates a function that, when executed, will only call the `func`\nfunction at most once per every `wait` milliseconds. If the throttled\nfunction is invoked more than once during the `wait` timeout, `func` will\nalso be called on the trailing edge of the timeout. Subsequent calls to the\nthrottled function will return the result of the last `func` call.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to throttle.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The number of milliseconds to throttle executions to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the new throttled function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar throttled = _.throttle(updatePosition, 100);\njQuery(window).on('scroll', throttled);"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3482,
            "description": "Creates a function that passes `value` to the `wrapper` function as its\nfirst argument. Additional arguments passed to the new function are appended\nto those passed to the `wrapper` function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to wrap.",
                    "type": "Mixed"
                },
                {
                    "name": "wrapper",
                    "description": "The wrapper function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar hello = function(name) { return 'hello: ' + name; };\nhello = _.wrap(hello, function(func) {\n  return 'before, ' + func('moe') + ', after';\n});\nhello();\n// => 'before, hello: moe, after'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3514,
            "description": "Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\ncorresponding HTML entities.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "string",
                    "description": "The string to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the escaped string.",
                "type": "String"
            },
            "example": [
                "\n\n_.escape('Moe, Larry & Curly');\n// => \"Moe, Larry &amp; Curly\""
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3532,
            "description": "This function returns the first argument passed to it.\n\nNote: It is used throughout Lo-Dash as a default callback.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "Any value.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `value`.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar moe = { 'name': 'moe' };\nmoe === _.identity(moe);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3552,
            "description": "Adds functions properties of `object` to the `lodash` function and chainable\nwrapper.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object of function properties to add to `lodash`.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n_.mixin({\n  'capitalize': function(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n  }\n});\n\n_.capitalize('larry');\n// => 'Larry'\n\n_('curly').capitalize();\n// => 'Curly'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3593,
            "description": "Reverts the '_' variable to its previous value and returns a reference to\nthe `lodash` function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "return": {
                "description": "Returns the `lodash` function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar lodash = _.noConflict();"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3610,
            "description": "Produces a random number between `min` and `max` (inclusive). If only one\nargument is passed, a number between `0` and the given number will be returned.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "min",
                    "description": "The minimum possible value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "max",
                    "description": "The maximum possible value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "Returns a random number.",
                "type": "Number"
            },
            "example": [
                "\n\n_.random(0, 5);\n// => a number between 1 and 5\n\n_.random(5);\n// => also a number between 1 and 5"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3640,
            "description": "Resolves the value of `property` on `object`. If `property` is a function\nit will be invoked and its result returned, else the property value is\nreturned. If `object` is falsey, then `null` is returned.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The property to get the value of.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the resolved value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar object = {\n  'cheese': 'crumpets',\n  'stuff': function() {\n    return 'nonsense';\n  }\n};\n\n_.result(object, 'cheese');\n// => 'crumpets'\n\n_.result(object, 'stuff');\n// => 'nonsense'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3674,
            "description": "A micro-templating method that handles arbitrary delimiters, preserves\nwhitespace, and correctly escapes quotes within interpolated code.\n\nNote: In the development build `_.template` utilizes sourceURLs for easier\ndebugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n\nNote: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`\nbuild and avoiding `_.template` use, or loading Lo-Dash in a sandboxed page.\nSee http://developer.chrome.com/trunk/extensions/sandboxingEval.html",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "text",
                    "description": "The template text.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object used to populate the text.",
                    "type": "Obect"
                },
                {
                    "name": "options",
                    "description": "The options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a compiled function when no `data` object\n is given, else it returns the interpolated text.",
                "type": "Function|String"
            },
            "example": [
                "\n\n// using a compiled template\nvar compiled = _.template('hello: <%= name %>');\ncompiled({ 'name': 'moe' });\n// => 'hello: moe'\n\nvar list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';\n_.template(list, { 'people': ['moe', 'larry', 'curly'] });\n// => '<li>moe</li><li>larry</li><li>curly</li>'\n\n// using the \"escape\" delimiter to escape HTML in data property values\n_.template('<b><%- value %></b>', { 'value': '<script>' });\n// => '<b>&lt;script></b>'\n\n// using the internal `print` function in \"evaluate\" delimiters\n_.template('<% print(\"Hello \" + epithet); %>.', { 'epithet': 'stooge' });\n// => 'Hello stooge.'\n\n// using custom template delimiter settings\n_.templateSettings = {\n  'interpolate': /\\{\\{([\\s\\S]+?)\\}\\}/g\n};\n\n_.template('Hello {{ name }}!', { 'name': 'Mustache' });\n// => 'Hello Mustache!'\n\n// using the `variable` option to ensure a with-statement isn't used in the compiled template\nvar compiled = _.template('hello: <%= data.name %>', null, { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n  var __t, __p = '', __e = _.escape;\n  __p += 'hello: ' + ((__t = ( data.name )) == null ? '' : __t);\n  return __p;\n}\n\n// using the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and a stack trace\nfs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3833,
            "description": "Executes the `callback` function `n` times, returning an array of the results\nof each `callback` execution. The `callback` is bound to `thisArg` and invoked\nwith one argument; (index).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "n",
                    "description": "The number of times to execute the callback.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of the results of each `callback` execution.",
                "type": "Array"
            },
            "example": [
                "\n\nvar diceRolls = _.times(3, _.partial(_.random, 1, 6));\n// => [3, 6, 4]\n\n_.times(3, function(n) { mage.castSpell(n); });\n// => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n\n_.times(3, function(n) { this.cast(n); }, mage);\n// => also calls `mage.castSpell(n)` three times"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3867,
            "description": "Converts the HTML entities `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#x27;`\nin `string` to their corresponding characters.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "string",
                    "description": "The string to unescape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the unescaped string.",
                "type": "String"
            },
            "example": [
                "\n\n_.unescape('Moe, Larry &amp; Curly');\n// => \"Moe, Larry & Curly\""
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3885,
            "description": "Generates a unique id. If `prefix` is passed, the id will be appended to it.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "prefix",
                    "description": "The value to prefix the id with.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a numeric id if no prefix is passed, else\n a string id may be returned.",
                "type": "Number|String"
            },
            "example": [
                "\n\n_.uniqueId('contact_');\n// => 'contact_104'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3906,
            "description": "Wraps the value in a `lodash` wrapper object.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to wrap.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the wrapper object.",
                "type": "Object"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\nvar youngest = _.chain(stooges)\n    .sortBy(function(stooge) { return stooge.age; })\n    .map(function(stooge) { return stooge.name + ' is ' + stooge.age; })\n    .first()\n    .value();\n// => 'moe is 40'"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3935,
            "description": "Invokes `interceptor` with the `value` as the first argument, and then\nreturns `value`. The purpose of this method is to \"tap into\" a method chain,\nin order to perform operations on intermediate results within the chain.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `interceptor`.",
                    "type": "Mixed"
                },
                {
                    "name": "interceptor",
                    "description": "The function to invoke.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns `value`.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.chain([1, 2, 3, 200])\n .filter(function(num) { return num % 2 == 0; })\n .tap(alert)\n .map(function(num) { return num * num })\n .value();\n// => // [2, 200] (alerted)\n// => [4, 40000]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3961,
            "description": "Enables method chaining on the wrapper object.",
            "name": "chain",
            "deprecated": true,
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "return": {
                "description": "Returns the wrapper object.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_([1, 2, 3]).value();\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3979,
            "description": "Extracts the wrapped value.",
            "name": "value",
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "return": {
                "description": "Returns the wrapped value.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_([1, 2, 3]).value();\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\lodash.js",
            "line": 3997,
            "description": "The semantic version number.",
            "static": 1,
            "memberof": "_",
            "type": "String",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1,
            "license": "RequireJS 2.1.1 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/requirejs for details",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 50,
            "description": "Helper function for iterating over an array. If the func returns\na true value, it will break out of the loop.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 65,
            "description": "Helper function for iterating over an array backwards. If the func\nreturns a true value, it will break out of the loop.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 84,
            "description": "Cycles over properties in an object and calls a function for each\nproperty value. If the function returns a truthy value, then the\niteration is stopped.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 100,
            "description": "Simple function to mix in properties from source into target,\nbut only if target does not already have a property of the same name.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 147,
            "description": "Constructs an error with a pointer to an URL with more information.",
            "params": [
                {
                    "name": "id",
                    "description": "the error ID that maps to an ID on a web page.",
                    "type": "String"
                },
                {
                    "name": "message",
                    "description": "human readable error.",
                    "type": "String"
                },
                {
                    "name": "err",
                    "description": "the original error, if there is one.",
                    "type": "Error",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Error"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 207,
            "description": "Trims the . and .. from an array of path segments.\nIt will keep a leading path segment if a .. will become\nthe first path segment, to help with module name lookups,\nwhich act like paths, but can be remapped. But the end result,\nall paths that use this function should look normalized.\nNOTE: this method MODIFIES the input array.",
            "params": [
                {
                    "name": "ary",
                    "description": "the array of path segments.",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 240,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                },
                {
                    "name": "applyMap",
                    "description": "apply the map config to the value. Should\nonly be done if this normalization is for a dependency ID.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 386,
            "description": "Creates a module mapping that includes plugin prefix, module\nname, and path. If parentModuleMap is provided it will\nalso normalize the name via require.normalize()",
            "params": [
                {
                    "name": "name",
                    "description": "the module name",
                    "type": "String"
                },
                {
                    "name": "parentModuleMap",
                    "description": "parent module map\nfor the module name, used to resolve relative names.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "isNormalized:",
                    "description": "is the ID already normalized.\nThis is true if this call is done for a define() module ID.",
                    "type": "Boolean"
                },
                {
                    "name": "applyMap:",
                    "description": "apply the map config to the ID.\nShould only be true if this map is for a dependency.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 523,
            "description": "Internal method to transfer globalQueue items to this context's\ndefQueue.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 804,
            "description": "Checks is the module is ready to define itself, and if so,\ndefine it.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1147,
            "description": "Given an event from a script node, get the requirejs info from it,\nand then removes the event listeners on the node.",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "Event"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1199,
            "description": "Set a configuration for the context.",
            "params": [
                {
                    "name": "cfg",
                    "description": "config object to integrate.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1380,
            "description": "Converts a module name + .extension into an URL path.\n*Requires* the use of a module name. It does not support using\nplain URLs like nameToUrl.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1438,
            "description": "Called to enable a module if it is still in the registry\nawaiting enablement. parent module is passed in for context,\nused by the optimizer.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1450,
            "description": "Internal method used by environment adapters to complete a load event.\nA load event could be a script load or just a load pass from a synchronous\nload call.",
            "params": [
                {
                    "name": "moduleName",
                    "description": "the name of the module to potentially complete.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1506,
            "description": "Converts a module name to a file path. Supports cases where\nmoduleName may actually be just an URL.\nNote that it **does not** call normalize on the moduleName,\nit is assumed to have already been normalized. This is an\ninternal API, not a public one. Use toUrl for the public API.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1577,
            "description": "Executes a module callack function. Broken out as a separate function\nsolely to allow the build system to sequence the files in the built\nlayer in the right sequence.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1588,
            "description": "callback for script loads, used to check status of loading.",
            "params": [
                {
                    "name": "evt",
                    "description": "the event from the browser for the script\nthat was loaded.",
                    "type": "Event"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1610,
            "description": "Callback for script errors.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1625,
            "description": "Main entry point.\n\nIf the only argument to require is a string, then the module that\nis represented by that string is fetched for the appropriate context.\n\nIf the first argument is an array, then it will be treated as an array\nof dependency string names to fetch. An optional function callback can\nbe specified to execute when all of those dependencies are available.\n\nMake a local req variable to help Caja compliance (it assumes things\non a require that are not standardized), and to give a short\nname for minification/local scope use.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1675,
            "description": "Support require.config() to make it easier to cooperate with other\nAMD loaders on globally agreed names.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1683,
            "description": "Execute something after the current tick\nof the event loop. Override for other envs\nthat have a better solution than setTimeout.",
            "params": [
                {
                    "name": "fn",
                    "description": "function to execute later.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1693,
            "description": "Export require as a global, but only if it does not already exist.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1740,
            "description": "Any errors that require explicitly generates will be passed to this\nfunction. Intercept/override it if you want custom error handling.",
            "params": [
                {
                    "name": "err",
                    "description": "the error object.",
                    "type": "Error"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1749,
            "description": "Does the request to load a module for the browser case.\nMake this a separate function to allow other environments\nto override it.",
            "params": [
                {
                    "name": "context",
                    "description": "the require context to find state.",
                    "type": "Object"
                },
                {
                    "name": "moduleName",
                    "description": "the name of the module.",
                    "type": "String"
                },
                {
                    "name": "url",
                    "description": "the URL to the module.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1895,
            "description": "The function that handles definitions of modules. Differs from\nrequire() in that a string for the module should be the first argument,\nand the function to execute after dependencies are loaded should\nreturn a value to define the module corresponding to the first argument's\nname.",
            "class": ""
        },
        {
            "file": "assets\\js\\libs\\require.js",
            "line": 1968,
            "description": "Executes the text. Normally just uses eval, but can be modified\nto use a better, environment-specific call. Only used for transpiling\nloader plugins, not for plain JS modules.",
            "params": [
                {
                    "name": "text",
                    "description": "the text to execute/evaluate.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 1,
            "description": "almond 0.2.0 Copyright (c) 2011, The Dojo Foundation All Rights Reserved.\nAvailable via the MIT or new BSD license.\nsee: http://github.com/jrburke/almond for details",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 20,
            "description": "Given a relative module name, like ./something, normalize it to\na real name that can be mapped to a path.",
            "params": [
                {
                    "name": "name",
                    "description": "the relative name",
                    "type": "String"
                },
                {
                    "name": "baseName",
                    "description": "a real name that the name arg is relative\nto.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "normalized name",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 179,
            "description": "Makes a name map, normalizing the name, and using a plugin\nfor normalization if necessary. Grabs a ref to plugin\ntoo, as an optimization.",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 359,
            "description": "Just drops the config on the floor, but returns req in case\nthe config return value is used.",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 4373,
            "description": "Utility function for retrieving the text value of an array of DOM nodes",
            "params": [
                {
                    "name": "elem",
                    "description": "",
                    "type": "Array|Element"
                }
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9838,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9842,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9849,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9852,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9855,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9858,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9861,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9864,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9869,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9872,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9875,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9882,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9885,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9888,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9891,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9897,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9900,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9920,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9931,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9935,
            "description": "Detect the JScript [[DontEnum]] bug:\n\nIn IE < 9 an objects own properties, shadowing non-enumerable ones, are\nmade non-enumerable as well.",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9943,
            "description": "Detect if `Array#shift` and `Array#splice` augment array-like objects\nincorrectly:\n\nFirefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`\nand `splice()` functions that fail to remove the last element, `value[0]`,\nof array-like objects even though the `length` property is set to `0`.\nThe `shift()` method is buggy in IE 8 compatibility mode, while `splice()`\nis buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9955,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9958,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9975,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9978,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9981,
            "description": "Detect lack of support for accessing string characters by index:\n\nIE < 8 can't access characters by index and IE 8 can only access\ncharacters by index on string literals.",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 9989,
            "description": "Detect if a node's [[Class]] is unresolvable (IE < 9)\nand that the JS engine won't error when attempting to coerce an object to\na string without a `toString` property value of `typeof` \"function\".",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10007,
            "description": "Detect if sourceURL syntax is usable without erroring:\n\nThe JS engine in Adobe products, like InDesign, will throw a syntax error\nwhen it encounters a single line comment beginning with the `@` symbol.\n\nThe JS engine in Narwhal will generate the function `function anonymous(){//}`\nand throw a syntax error.\n\nAvoid comments beginning `@` symbols in IE because they are part of its\nnon-standard conditional compilation support.\nhttp://msdn.microsoft.com/en-us/library/121hztk3(v=vs.94).aspx",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10024,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10030,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10037,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10048,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10061,
            "description": "The `lodash` function.",
            "name": "_",
            "is_constructor": 1,
            "category": [
                "Chaining"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to wrap in a `lodash` instance.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns a `lodash` instance.",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10082,
            "description": "By default, the template delimiters used by Lo-Dash are similar to those in\nembedded Ruby (ERB). Change the following template settings to use alternative\ndelimiters.",
            "static": 1,
            "memberof": "_",
            "type": "Object",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10093,
            "description": "Used to detect `data` property values to be HTML-escaped.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "RegExp",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10102,
            "description": "Used to detect code to be evaluated.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "RegExp",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10111,
            "description": "Used to detect `data` property values to inject.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "RegExp",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10120,
            "description": "Used to reference the data object in the template text.",
            "static": 1,
            "memberof": "_.templateSettings",
            "type": "String",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10132,
            "description": "The template used to create iterator functions.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data object used to populate the text.",
                    "type": "Obect"
                }
            ],
            "return": {
                "description": "Returns the interpolated text.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10254,
            "description": "Reusable iterator options shared by\n`countBy`, `every`, `filter`, `find`, `forEach`, `forIn`, `forOwn`, `groupBy`,\n`map`, `reject`, `some`, and `sortBy`.",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10265,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10274,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10280,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10292,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10298,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10303,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10310,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10323,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10341,
            "description": "Creates a function optimized for searching large arrays for a given `value`,\nstarting at `fromIndex`, using strict equality for comparisons, i.e. `===`.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "array",
                    "description": "The array to search.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to search for.",
                    "type": "Mixed"
                },
                {
                    "name": "fromIndex",
                    "description": "The index to start searching from.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "largeSize",
                    "description": "The length at which an array is considered large.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "30"
                }
            ],
            "return": {
                "description": "Returns `true` if `value` is found, else `false`.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10378,
            "description": "Used by `sortBy` to compare transformed `collection` values, stable sorting\nthem in ascending order.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "a",
                    "description": "The object to compare to `b`.",
                    "type": "Object"
                },
                {
                    "name": "b",
                    "description": "The object to compare to `a`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the sort order indicator of `1` or `-1`.",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10407,
            "description": "Creates a function that, when called, invokes `func` with the `this`\nbinding of `thisArg` and prepends any `partailArgs` to the arguments passed\nto the bound function.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "The function to bind or the method name.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `func`.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "partialArgs",
                    "description": "An array of arguments to be partially applied.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the new bound function.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10459,
            "description": "Produces an iteration callback bound to an optional `thisArg`. If `func` is\na property name, the callback will return the property value for a given element.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "func",
                    "description": "The function called per\niteration or property name to query.",
                    "type": "Function|String",
                    "optional": true,
                    "optdefault": "identity|property"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a callback function.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10486,
            "description": "Creates compiled iteration functions. The iteration function will be created\nto iterate over only objects if the first argument of `options.args` is\n\"object\" or `options.inLoop.array` is falsey.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "[options1,",
                    "description": "options2, ...] The compile options objects.\n\n useHas - A boolean to specify using `hasOwnProperty` checks in the object loop.\n\n useStrict - A boolean to specify including the \"use strict\" directive.\n\n args - A string of comma separated arguments the iteration function will accept.\n\n init - A string to specify the initial value of the `result` variable.\n\n top - A string of code to execute before the iteration branches.\n\n beforeLoop - A string or object containing an \"array\" or \"object\" property\n  of code to execute before the array or object loops.\n\n inLoop - A string or object containing an \"array\" or \"object\" property\n  of code to execute in the array or object loops.\n\n bottom - A string of code to execute after the iteration branches but\n  before the `result` is returned.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the compiled function.",
                "type": "Function"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10573,
            "description": "Used by `template` to escape characters for inclusion in compiled\nstring literals.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "match",
                    "description": "The matched character to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the escaped character.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10585,
            "description": "Used by `escape` to convert characters to HTML entities.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "match",
                    "description": "The matched character to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the escaped character.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10596,
            "description": "A no-operation function.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10605,
            "description": "Used by `unescape` to convert HTML entities to characters.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "match",
                    "description": "The matched character to unescape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the unescaped character.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10618,
            "description": "Creates an object composed of the inverted keys and values of the given `object`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to invert.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the created inverted object.",
                "type": "Object"
            },
            "example": [
                "\n\n _.invert({ 'first': 'Moe', 'second': 'Larry', 'third': 'Curly' });\n// => { 'Moe': 'first', 'Larry': 'second', 'Curly': 'third' } (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10637,
            "description": "Checks if `value` is an `arguments` object.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is an `arguments` object, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n(function() { return _.isArguments(arguments); })(1, 2, 3);\n// => true\n\n_.isArguments([1, 2, 3]);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10663,
            "description": "Checks if `value` is an array.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is an array, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n(function() { return _.isArray(arguments); })();\n// => false\n\n_.isArray([1, 2, 3]);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10683,
            "description": "Checks if `value` is a function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a function, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isFunction(_);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10706,
            "description": "Checks if a given `value` is an object created by the `Object` constructor.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if `value` is a plain object, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\nfunction Stooge(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\n_.isPlainObject(new Stooge('moe', 40));\n// false\n\n_.isPlainObject([1, 2, 3]);\n// false\n\n_.isPlainObject({ 'name': 'moe', 'age': 40 });\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10742,
            "description": "A fallback implementation of `isPlainObject` that checks if a given `value`\nis an object created by the `Object` constructor, assuming objects created\nby the `Object` constructor have no inherited enumerable properties and that\nthere are no `Object.prototype` extensions.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if `value` is a plain object, else `false`.",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10785,
            "description": "A shim implementation of `Object.keys` that produces an array of the given\nobject's own enumerable property names.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property names.",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10799,
            "description": "Used to convert characters to HTML entities:\n\nThough the `>` character is escaped for symmetry, characters like `>` and `/`\ndon't require escaping in HTML and have no special meaning unless they're part\nof a tag or an unquoted attribute value.\nhttp://mathiasbynens.be/notes/ambiguous-ampersands (under \"semi-related fun fact\")",
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10815,
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10820,
            "description": "Creates a clone of `value`. If `deep` is `true`, all nested objects will\nalso be cloned otherwise they will be assigned by reference. Functions, DOM\nnodes, `arguments` objects, and objects created by constructors other than\n`Object` are **not** cloned.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to clone.",
                    "type": "Mixed"
                },
                {
                    "name": "deep",
                    "description": "A flag to indicate a deep clone.",
                    "type": "Boolean"
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `deep`.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[stackA=[]] Internally used to track traversed source objects.",
                    "type": "Array"
                },
                {
                    "name": "-",
                    "description": "[stackB=[]] Internally used to associate clones with their\n source counterparts.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the cloned `value`.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.clone({ 'name': 'moe' });\n// => { 'name': 'moe' }\n\nvar shallow = _.clone(stooges);\nshallow[0] === stooges[0];\n// => true\n\nvar deep = _.clone(stooges, true);\nshallow[0] === stooges[0];\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10921,
            "description": "Assigns enumerable properties of the default object(s) to the `destination`\nobject for all `destination` properties that resolve to `null`/`undefined`.\nOnce a property is set, additional defaults of the same property will be\nignored.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The destination object.",
                    "type": "Object"
                },
                {
                    "name": "[default1,",
                    "description": "default2, ...] The default objects.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the destination object.",
                "type": "Object"
            },
            "example": [
                "\n\nvar iceCream = { 'flavor': 'chocolate' };\n_.defaults(iceCream, { 'flavor': 'vanilla', 'sprinkles': 'rainbow' });\n// => { 'flavor': 'chocolate', 'sprinkles': 'rainbow' }"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10943,
            "description": "Assigns enumerable properties of the source object(s) to the `destination`\nobject. Subsequent sources will overwrite propery assignments of previous\nsources.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The destination object.",
                    "type": "Object"
                },
                {
                    "name": "[source1,",
                    "description": "source2, ...] The source objects.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the destination object.",
                "type": "Object"
            },
            "example": [
                "\n\n_.extend({ 'name': 'moe' }, { 'age': 40 });\n// => { 'name': 'moe', 'age': 40 }"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10961,
            "description": "Iterates over `object`'s own and inherited enumerable properties, executing\nthe `callback` for each property. The `callback` is bound to `thisArg` and\ninvoked with three arguments; (value, key, object). Callbacks may exit iteration\nearly by explicitly returning `false`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to iterate over.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `object`.",
                "type": "Object"
            },
            "example": [
                "\n\nfunction Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.bark = function() {\n  alert('Woof, woof!');\n};\n\n_.forIn(new Dog('Dagny'), function(value, key) {\n  alert(key);\n});\n// => alerts 'name' and 'bark' (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 10993,
            "description": "Iterates over `object`'s own enumerable properties, executing the `callback`\nfor each property. The `callback` is bound to `thisArg` and invoked with three\narguments; (value, key, object). Callbacks may exit iteration early by explicitly\nreturning `false`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to iterate over.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `object`.",
                "type": "Object"
            },
            "example": [
                "\n\n_.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {\n  alert(key);\n});\n// => alerts '0', '1', and 'length' (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11015,
            "description": "Creates a sorted array of all enumerable properties, own and inherited,\nof `object` that have function values.",
            "static": 1,
            "memberof": "_",
            "alias": "methods",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property names that have function values.",
                "type": "Array"
            },
            "example": [
                "\n\n_.functions(_);\n// => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11038,
            "description": "Checks if the specified object `property` exists and is a direct property,\ninstead of an inherited property.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to check.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The property to check for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `true` if key is a direct property, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11057,
            "description": "Checks if `value` is a boolean (`true` or `false`) value.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a boolean value, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isBoolean(null);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11074,
            "description": "Checks if `value` is a date.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a date, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isDate(new Date);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11091,
            "description": "Checks if `value` is a DOM element.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a DOM element, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isElement(document.body);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11108,
            "description": "Checks if `value` is empty. Arrays, strings, or `arguments` objects with a\nlength of `0` and objects with no own enumerable properties are considered\n\"empty\".",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to inspect.",
                    "type": "Array|Object|String"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is empty, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isEmpty([1, 2, 3]);\n// => false\n\n_.isEmpty({});\n// => true\n\n_.isEmpty('');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11145,
            "description": "Performs a deep comparison between two values to determine if they are\nequivalent to each other.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "a",
                    "description": "The value to compare.",
                    "type": "Mixed"
                },
                {
                    "name": "b",
                    "description": "The other value to compare.",
                    "type": "Mixed"
                },
                {
                    "name": "-",
                    "description": "[stackA=[]] Internally used track traversed `a` objects.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[stackB=[]] Internally used track traversed `b` objects.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns `true` if the values are equvalent, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\nvar moe = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\nvar clone = { 'name': 'moe', 'luckyNumbers': [13, 27, 34] };\n\nmoe == clone;\n// => false\n\n_.isEqual(moe, clone);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11302,
            "description": "Checks if `value` is a finite number.\n\nNote: This is not the same as native `isFinite`, which will return true for\nbooleans and other values. See http://es5.github.com/#x15.1.2.5.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a finite number, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isFinite(-101);\n// => true\n\n_.isFinite('10');\n// => false\n\n_.isFinite(Infinity);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11329,
            "description": "Checks if `value` is the language type of Object.\n(e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is an object, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isObject({});\n// => true\n\n_.isObject([1, 2, 3]);\n// => true\n\n_.isObject(1);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11357,
            "description": "Checks if `value` is `NaN`.\n\nNote: This is not the same as native `isNaN`, which will return true for\n`undefined` and other values. See http://es5.github.com/#x15.1.2.4.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is `NaN`, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isNaN(NaN);\n// => true\n\n_.isNaN(new Number(NaN));\n// => true\n\nisNaN(undefined);\n// => true\n\n_.isNaN(undefined);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11389,
            "description": "Checks if `value` is `null`.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is `null`, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isNull(null);\n// => true\n\n_.isNull(undefined);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11410,
            "description": "Checks if `value` is a number.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a number, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isNumber(8.4 * 5);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11427,
            "description": "Checks if `value` is a regular expression.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a regular expression, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isRegExp(/moe/);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11444,
            "description": "Checks if `value` is a string.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is a string, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isString('moe');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11461,
            "description": "Checks if `value` is `undefined`.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to check.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `value` is `undefined`, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.isUndefined(void 0);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11479,
            "description": "Creates an array composed of the own enumerable property names of `object`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property names.",
                "type": "Array"
            },
            "example": [
                "\n\n_.keys({ 'one': 1, 'two': 2, 'three': 3 });\n// => ['one', 'two', 'three'] (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11504,
            "description": "Merges enumerable properties of the source object(s) into the `destination`\nobject. Subsequent sources will overwrite propery assignments of previous\nsources.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The destination object.",
                    "type": "Object"
                },
                {
                    "name": "[source1,",
                    "description": "source2, ...] The source objects.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[indicator] Internally used to indicate that the `stack`\n argument is an array of traversed objects instead of another source object.",
                    "type": "Object"
                },
                {
                    "name": "-",
                    "description": "[stackA=[]] Internally used to track traversed source objects.",
                    "type": "Array"
                },
                {
                    "name": "-",
                    "description": "[stackB=[]] Internally used to associate clones with their\n source counterparts.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns the destination object.",
                "type": "Object"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe' },\n  { 'name': 'larry' }\n];\n\nvar ages = [\n  { 'age': 40 },\n  { 'age': 50 }\n];\n\n_.merge(stooges, ages);\n// => [{ 'name': 'moe', 'age': 40 }, { 'name': 'larry', 'age': 50 }]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11567,
            "description": "Creates a shallow clone of `object` excluding the specified properties.\nProperty names may be specified as individual arguments or as arrays of\nproperty names. If `callback` is passed, it will be executed for each property\nin the `object`, omitting the properties `callback` returns truthy for. The\n`callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The source object.",
                    "type": "Object"
                },
                {
                    "name": "callback|[prop1,",
                    "description": "prop2, ...] The properties to omit\n or the function called per iteration.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object without the omitted properties.",
                "type": "Object"
            },
            "example": [
                "\n\n_.omit({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'userid');\n// => { 'name': 'moe', 'age': 40 }\n\n_.omit({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {\n  return key.charAt(0) == '_';\n});\n// => { 'name': 'moe' }"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11594,
            "description": "Creates a two dimensional array of the given object's key-value pairs,\ni.e. `[[key1, value1], [key2, value2]]`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns new array of key-value pairs.",
                "type": "Array"
            },
            "example": [
                "\n\n_.pairs({ 'moe': 30, 'larry': 40, 'curly': 50 });\n// => [['moe', 30], ['larry', 40], ['curly', 50]] (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11614,
            "description": "Creates a shallow clone of `object` composed of the specified properties.\nProperty names may be specified as individual arguments or as arrays of\nproperty names. If `callback` is passed, it will be executed for each property\nin the `object`, picking the properties `callback` returns truthy for. The\n`callback` is bound to `thisArg` and invoked with three arguments; (value, key, object).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The source object.",
                    "type": "Object"
                },
                {
                    "name": "callback|[prop1,",
                    "description": "prop2, ...] The properties to pick\n or the function called per iteration.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns an object composed of the picked properties.",
                "type": "Object"
            },
            "example": [
                "\n\n_.pick({ 'name': 'moe', 'age': 40, 'userid': 'moe1' }, 'name', 'age');\n// => { 'name': 'moe', 'age': 40 }\n\n_.pick({ 'name': 'moe', '_hint': 'knucklehead', '_seed': '96c4eb' }, function(value, key) {\n  return key.charAt(0) != '_';\n});\n// => { 'name': 'moe' }"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11656,
            "description": "Creates an array composed of the own enumerable property values of `object`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Objects"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of property values.",
                "type": "Array"
            },
            "example": [
                "\n\n_.values({ 'one': 1, 'two': 2, 'three': 3 });\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11677,
            "description": "Checks if a given `target` element is present in a `collection` using strict\nequality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "alias": "include",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "target",
                    "description": "The value to check for.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `true` if the `target` element is found, else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.contains([1, 2, 3], 3);\n// => true\n\n_.contains({ 'name': 'moe', 'age': 40 }, 'moe');\n// => true\n\n_.contains('curly', 'ur');\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11709,
            "description": "Creates an object composed of keys returned from running each element of\n`collection` through a `callback`. The corresponding value of each key is\nthe number of times the key was returned by `callback`. The `callback` is\nbound to `thisArg` and invoked with three arguments; (value, index|key, collection).\nThe `callback` argument may also be the name of a property to count by (e.g. 'length').",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback|property",
                    "description": "The function called per iteration\n or property name to count by.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the composed aggregate object.",
                "type": "Object"
            },
            "example": [
                "\n\n_.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });\n// => { '4': 1, '6': 2 }\n\n_.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n// => { '4': 1, '6': 2 }\n\n_.countBy(['one', 'two', 'three'], 'length');\n// => { '3': 2, '5': 1 }"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11737,
            "description": "Checks if the `callback` returns a truthy value for **all** elements of a\n`collection`. The `callback` is bound to `thisArg` and invoked with three\narguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "all",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `true` if all elements pass the callback check,\n else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.every([true, 1, null, 'yes'], Boolean);\n// => false"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11758,
            "description": "Examines each element in a `collection`, returning an array of all elements\nthe `callback` returns truthy for. The `callback` is bound to `thisArg` and\ninvoked with three arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "select",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of elements that passed the callback check.",
                "type": "Array"
            },
            "example": [
                "\n\nvar evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n// => [2, 4, 6]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11778,
            "description": "Examines each element in a `collection`, returning the first one the `callback`\nreturns truthy for. The function returns as soon as it finds an acceptable\nelement, and does not iterate over the entire `collection`. The `callback` is\nbound to `thisArg` and invoked with three arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "detect",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the element that passed the callback check,\n else `undefined`.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar even = _.find([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11803,
            "description": "Iterates over a `collection`, executing the `callback` for each element in\nthe `collection`. The `callback` is bound to `thisArg` and invoked with three\narguments; (value, index|key, collection). Callbacks may exit iteration early\nby explicitly returning `false`.",
            "static": 1,
            "memberof": "_",
            "alias": "each",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `collection`.",
                "type": "Array|Object|String"
            },
            "example": [
                "\n\n_([1, 2, 3]).forEach(alert).join(',');\n// => alerts each number and returns '1,2,3'\n\n_.forEach({ 'one': 1, 'two': 2, 'three': 3 }, alert);\n// => alerts each number (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11827,
            "description": "Creates an object composed of keys returned from running each element of\n`collection` through a `callback`. The corresponding value of each key is an\narray of elements passed to `callback` that returned the key. The `callback`\nis bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\nThe `callback` argument may also be the name of a property to count by (e.g. 'length').",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback|property",
                    "description": "The function called per iteration\n or property name to group by.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the composed aggregate object.",
                "type": "Object"
            },
            "example": [
                "\n\n_.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });\n// => { '4': [4.2], '6': [6.1, 6.4] }\n\n_.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);\n// => { '4': [4.2], '6': [6.1, 6.4] }\n\n_.groupBy(['one', 'two', 'three'], 'length');\n// => { '3': ['one', 'two'], '5': ['three'] }"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11859,
            "description": "Invokes the method named by `methodName` on each element in the `collection`,\nreturning an array of the results of each invoked method. Additional arguments\nwill be passed to each invoked method. If `methodName` is a function it will\nbe invoked for, and `this` bound to, each element in the `collection`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "methodName",
                    "description": "The name of the method to invoke or\n the function invoked per iteration.",
                    "type": "Function|String"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to invoke the method with.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns a new array of the results of each invoked method.",
                "type": "Array"
            },
            "example": [
                "\n\n_.invoke([[5, 1, 7], [3, 2, 1]], 'sort');\n// => [[1, 5, 7], [1, 2, 3]]\n\n_.invoke([123, 456], String.prototype.split, '');\n// => [['1', '2', '3'], ['4', '5', '6']]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11895,
            "description": "Creates an array of values by running each element in the `collection`\nthrough a `callback`. The `callback` is bound to `thisArg` and invoked with\nthree arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "collect",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of the results of each `callback` execution.",
                "type": "Array"
            },
            "example": [
                "\n\n_.map([1, 2, 3], function(num) { return num * 3; });\n// => [3, 6, 9]\n\n_.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });\n// => [3, 6, 9] (order is not guaranteed)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11918,
            "description": "Retrieves the maximum value of an `array`. If `callback` is passed,\nit will be executed for each value in the `array` to generate the\ncriterion by which the value is ranked. The `callback` is bound to\n`thisArg` and invoked with three arguments; (value, index, collection).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the maximum value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.max(stooges, function(stooge) { return stooge.age; });\n// => { 'name': 'curly', 'age': 60 };"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 11967,
            "description": "Retrieves the minimum value of an `array`. If `callback` is passed,\nit will be executed for each value in the `array` to generate the\ncriterion by which the value is ranked. The `callback` is bound to `thisArg`\nand invoked with three arguments; (value, index, collection).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the minimum value.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.min([10, 5, 100, 2, 1000]);\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12010,
            "description": "Retrieves the value of a specified property from all elements in\nthe `collection`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "property",
                    "description": "The property to pluck.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns a new array of property values.",
                "type": "Array"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.pluck(stooges, 'name');\n// => ['moe', 'larry', 'curly']"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12039,
            "description": "Boils down a `collection` to a single value. The initial state of the\nreduction is `accumulator` and each successive step of it should be returned\nby the `callback`. The `callback` is bound to `thisArg` and invoked with 4\narguments; for arrays they are (accumulator, value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "foldl, inject",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "accumulator",
                    "description": "Initial value of the accumulator.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the accumulated value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar sum = _.reduce([1, 2, 3], function(memo, num) { return memo + num; });\n// => 6"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12078,
            "description": "The right-associative version of `_.reduce`.",
            "static": 1,
            "memberof": "_",
            "alias": "foldr",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "accumulator",
                    "description": "Initial value of the accumulator.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the accumulated value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar list = [[0, 1], [2, 3], [4, 5]];\nvar flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n// => [4, 5, 2, 3, 0, 1]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12116,
            "description": "The opposite of `_.filter`, this method returns the values of a\n`collection` that `callback` does **not** return truthy for.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of elements that did **not** pass the\n callback check.",
                "type": "Array"
            },
            "example": [
                "\n\nvar odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });\n// => [1, 3, 5]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12137,
            "description": "Creates an array of shuffled `array` values, using a version of the\nFisher-Yates shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to shuffle.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new shuffled collection.",
                "type": "Array"
            },
            "example": [
                "\n\n_.shuffle([1, 2, 3, 4, 5, 6]);\n// => [4, 1, 6, 3, 5, 2]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12163,
            "description": "Gets the size of the `collection` by returning `collection.length` for arrays\nand array-like objects or the number of own enumerable properties for objects.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to inspect.",
                    "type": "Array|Object|String"
                }
            ],
            "return": {
                "description": "Returns `collection.length` or number of own enumerable properties.",
                "type": "Number"
            },
            "example": [
                "\n\n_.size([1, 2]);\n// => 2\n\n_.size({ 'one': 1, 'two': 2, 'three': 3 });\n// => 3\n\n_.size('curly');\n// => 5"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12188,
            "description": "Checks if the `callback` returns a truthy value for **any** element of a\n`collection`. The function returns as soon as it finds passing value, and\ndoes not iterate over the entire `collection`. The `callback` is bound to\n`thisArg` and invoked with three arguments; (value, index|key, collection).",
            "static": 1,
            "memberof": "_",
            "alias": "any",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns `true` if any element passes the callback check,\n else `false`.",
                "type": "Boolean"
            },
            "example": [
                "\n\n_.some([null, 0, 'yes', false]);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12213,
            "description": "Creates an array, stable sorted in ascending order by the results of\nrunning each element of `collection` through a `callback`. The `callback`\nis bound to `thisArg` and invoked with three arguments; (value, index|key, collection).\nThe `callback` argument may also be the name of a property to sort by (e.g. 'length').",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "callback|property",
                    "description": "The function called per iteration\n or property name to sort by.",
                    "type": "Function|String"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of sorted elements.",
                "type": "Array"
            },
            "example": [
                "\n\n_.sortBy([1, 2, 3], function(num) { return Math.sin(num); });\n// => [3, 1, 2]\n\n_.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);\n// => [3, 1, 2]\n\n_.sortBy(['larry', 'brendan', 'moe'], 'length');\n// => ['moe', 'larry', 'brendan']"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12261,
            "description": "Converts the `collection`, to an array.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to convert.",
                    "type": "Array|Object|String"
                }
            ],
            "return": {
                "description": "Returns the new converted array.",
                "type": "Array"
            },
            "example": [
                "\n\n(function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);\n// => [2, 3, 4]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12287,
            "description": "Examines each element in a `collection`, returning an array of all elements\nthat contain the given `properties`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Collections"
            ],
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to iterate over.",
                    "type": "Array|Object|String"
                },
                {
                    "name": "properties",
                    "description": "The object of properties/values to filter by.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a new array of elements that contain the given `properties`.",
                "type": "Array"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\n_.where(stooges, { 'age': 40 });\n// => [{ 'name': 'moe', 'age': 40 }]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12324,
            "description": "Creates an array with all falsey values of `array` removed. The values\n`false`, `null`, `0`, `\"\"`, `undefined` and `NaN` are all falsey.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to compact.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new filtered array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.compact([0, 1, false, 2, '', 3]);\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12352,
            "description": "Creates an array of `array` elements not present in the other arrays\nusing strict equality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to process.",
                    "type": "Array"
                },
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to check.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of `array` elements not present in the\n other arrays.",
                "type": "Array"
            },
            "example": [
                "\n\n_.difference([1, 2, 3, 4, 5], [5, 2, 10]);\n// => [1, 3, 4]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12387,
            "description": "Gets the first element of the `array`. Pass `n` to return the first `n`\nelements of the `array`.",
            "static": 1,
            "memberof": "_",
            "alias": "head, take",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the first element or an array of the first `n`\n elements of `array`.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.first([5, 4, 3, 2, 1]);\n// => 5"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12412,
            "description": "Flattens a nested array (the nesting can be to any depth). If `shallow` is\ntruthy, `array` will only be flattened a single level.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to compact.",
                    "type": "Array"
                },
                {
                    "name": "shallow",
                    "description": "A flag to indicate only flattening a single level.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns a new flattened array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.flatten([1, [2], [3, [[4]]]]);\n// => [1, 2, 3, 4];\n\n_.flatten([1, [2], [3, [[4]]]], true);\n// => [1, 2, 3, [[4]]];"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12448,
            "description": "Gets the index at which the first occurrence of `value` is found using\nstrict equality for comparisons, i.e. `===`. If the `array` is already\nsorted, passing `true` for `fromIndex` will run a faster binary search.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to search.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to search for.",
                    "type": "Mixed"
                },
                {
                    "name": "fromIndex",
                    "description": "The index to start searching from or\n `true` to perform a binary search on a sorted `array`.",
                    "type": "Boolean|Number",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "Returns the index of the matched value or `-1`.",
                "type": "Number"
            },
            "example": [
                "\n\n_.indexOf([1, 2, 3, 1, 2, 3], 2);\n// => 1\n\n_.indexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// => 4\n\n_.indexOf([1, 1, 2, 2, 3, 3], 2, true);\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12490,
            "description": "Gets all but the last element of `array`. Pass `n` to exclude the last `n`\nelements from the result.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns all but the last element or `n` elements of `array`.",
                "type": "Array"
            },
            "example": [
                "\n\n_.initial([3, 2, 1]);\n// => [3, 2]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12513,
            "description": "Computes the intersection of all the passed-in arrays using strict equality\nfor comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to process.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of unique elements, in order, that are\n present in **all** of the arrays.",
                "type": "Array"
            },
            "example": [
                "\n\n_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n// => [1, 2]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12549,
            "description": "Gets the last element of the `array`. Pass `n` to return the last `n`\nelements of the `array`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the last element or an array of the last `n`\n elements of `array`.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.last([3, 2, 1]);\n// => 1"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12574,
            "description": "Gets the index at which the last occurrence of `value` is found using\nstrict equality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to search.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to search for.",
                    "type": "Mixed"
                },
                {
                    "name": "fromIndex",
                    "description": "The index to start searching from.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "array.length-1"
                }
            ],
            "return": {
                "description": "Returns the index of the matched value or `-1`.",
                "type": "Number"
            },
            "example": [
                "\n\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);\n// => 4\n\n_.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);\n// => 1"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12606,
            "description": "Creates an object composed from arrays of `keys` and `values`. Pass either\na single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`, or\ntwo arrays, one of `keys` and one of corresponding `values`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "keys",
                    "description": "The array of keys.",
                    "type": "Array"
                },
                {
                    "name": "values",
                    "description": "The array of values.",
                    "type": "Array",
                    "optional": true,
                    "optdefault": "["
                }
            ],
            "return": {
                "description": "Returns an object composed of the given keys and\n corresponding values.",
                "type": "Object"
            },
            "example": [
                "\n\n_.object(['moe', 'larry', 'curly'], [30, 40, 50]);\n// => { 'moe': 30, 'larry': 40, 'curly': 50 }"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12639,
            "description": "Creates an array of numbers (positive and/or negative) progressing from\n`start` up to but not including `stop`. This method is a port of Python's\n`range()` function. See http://docs.python.org/library/functions.html#range.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "start",
                    "description": "The start of the range.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "end",
                    "description": "The end of the range.",
                    "type": "Number"
                },
                {
                    "name": "step",
                    "description": "The value to increment or descrement by.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "Returns a new range array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.range(10);\n// => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n_.range(1, 11);\n// => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n_.range(0, 30, 5);\n// => [0, 5, 10, 15, 20, 25]\n\n_.range(0, -10, -1);\n// => [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]\n\n_.range(0);\n// => []"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12689,
            "description": "The opposite of `_.initial`, this method gets all but the first value of\n`array`. Pass `n` to exclude the first `n` values from the result.",
            "static": 1,
            "memberof": "_",
            "alias": "drop, tail",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to query.",
                    "type": "Array"
                },
                {
                    "name": "n",
                    "description": "The number of elements to return.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "-",
                    "description": "[guard] Internally used to allow this method to work with\n others like `_.map` without using their callback `index` argument for `n`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns all but the first value or `n` values of `array`.",
                "type": "Array"
            },
            "example": [
                "\n\n_.rest([3, 2, 1]);\n// => [2, 1]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12713,
            "description": "Uses a binary search to determine the smallest index at which the `value`\nshould be inserted into `array` in order to maintain the sort order of the\nsorted `array`. If `callback` is passed, it will be executed for `value` and\neach element in `array` to compute their sort ranking. The `callback` is\nbound to `thisArg` and invoked with one argument; (value). The `callback`\nargument may also be the name of a property to order by.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to iterate over.",
                    "type": "Array"
                },
                {
                    "name": "value",
                    "description": "The value to evaluate.",
                    "type": "Mixed"
                },
                {
                    "name": "callback",
                    "description": "The function called\n per iteration or property name to order by.",
                    "type": "Function|String",
                    "optional": true,
                    "optdefault": "identity|property"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the index at which the value should be inserted\n into `array`.",
                "type": "Number"
            },
            "example": [
                "\n\n_.sortedIndex([20, 30, 50], 40);\n// => 2\n\n_.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');\n// => 2\n\nvar dict = {\n  'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }\n};\n\n_.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n  return dict.wordToNumber[word];\n});\n// => 2\n\n_.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {\n  return this.wordToNumber[word];\n}, dict);\n// => 2"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12773,
            "description": "Computes the union of the passed-in arrays using strict equality for\ncomparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to process.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of unique values, in order, that are\n present in one or more of the arrays.",
                "type": "Array"
            },
            "example": [
                "\n\n_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n// => [1, 2, 3, 101, 10]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12803,
            "description": "Creates a duplicate-value-free version of the `array` using strict equality\nfor comparisons, i.e. `===`. If the `array` is already sorted, passing `true`\nfor `isSorted` will run a faster algorithm. If `callback` is passed, each\nelement of `array` is passed through a callback` before uniqueness is computed.\nThe `callback` is bound to `thisArg` and invoked with three arguments; (value, index, array).",
            "static": 1,
            "memberof": "_",
            "alias": "unique",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to process.",
                    "type": "Array"
                },
                {
                    "name": "isSorted",
                    "description": "A flag to indicate that the `array` is already sorted.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "identity"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a duplicate-value-free array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.uniq([1, 2, 1, 3, 1]);\n// => [1, 2, 3]\n\n_.uniq([1, 1, 2, 2, 3], true);\n// => [1, 2, 3]\n\n_.uniq([1, 2, 1.5, 3, 2.5], function(num) { return Math.floor(num); });\n// => [1, 2, 3]\n\n_.uniq([1, 2, 1.5, 3, 2.5], function(num) { return this.floor(num); }, Math);\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12859,
            "description": "Creates an array with all occurrences of the passed values removed using\nstrict equality for comparisons, i.e. `===`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "array",
                    "description": "The array to filter.",
                    "type": "Array"
                },
                {
                    "name": "[value1,",
                    "description": "value2, ...] Values to remove.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns a new filtered array.",
                "type": "Array"
            },
            "example": [
                "\n\n_.without([1, 2, 1, 0, 3, 1, 4], 0, 1);\n// => [2, 3, 4]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12889,
            "description": "Groups the elements of each array at their corresponding indexes. Useful for\nseparate data sources that are coordinated through matching array indexes.\nFor a matrix of nested arrays, `_.zip.apply(...)` can transpose the matrix\nin a similar fashion.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Arrays"
            ],
            "params": [
                {
                    "name": "[array1,",
                    "description": "array2, ...] Arrays to process.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns a new array of grouped elements.",
                "type": "Array"
            },
            "example": [
                "\n\n_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);\n// => [['moe', 30, true], ['larry', 40, false], ['curly', 50, false]]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12918,
            "description": "Creates a function that is restricted to executing only after it is\ncalled `n` times.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "n",
                    "description": "The number of times the function must be called before\nit is executed.",
                    "type": "Number"
                },
                {
                    "name": "func",
                    "description": "The function to restrict.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new restricted function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar renderNotes = _.after(notes.length, render);\n_.forEach(notes, function(note) {\n  note.asyncSave({ 'success': renderNotes });\n});\n// `renderNotes` is run once, after all notes have saved"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12948,
            "description": "Creates a function that, when called, invokes `func` with the `this`\nbinding of `thisArg` and prepends any additional `bind` arguments to those\npassed to the bound function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to bind.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `func`.",
                    "type": "Mixed",
                    "optional": true
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to be partially applied.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the new bound function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar func = function(greeting) {\n  return greeting + ' ' + this.name;\n};\n\nfunc = _.bind(func, { 'name': 'moe' }, 'hi');\nfunc();\n// => 'hi moe'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 12978,
            "description": "Binds methods on `object` to `object`, overwriting the existing method.\nIf no method names are provided, all the function properties of `object`\nwill be bound.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to bind and assign the bound methods to.",
                    "type": "Object"
                },
                {
                    "name": "[methodName1,",
                    "description": "methodName2, ...] Method names on the object to bind.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `object`.",
                "type": "Object"
            },
            "example": [
                "\n\nvar buttonView = {\n 'label': 'lodash',\n 'onClick': function() { alert('clicked: ' + this.label); }\n};\n\n_.bindAll(buttonView);\njQuery('#lodash_button').on('click', buttonView.onClick);\n// => When the button is clicked, `this.label` will have the correct value"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13018,
            "description": "Creates a function that is the composition of the passed functions,\nwhere each function consumes the return value of the function that follows.\nIn math terms, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "[func1,",
                    "description": "func2, ...] Functions to compose.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new composed function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar greet = function(name) { return 'hi: ' + name; };\nvar exclaim = function(statement) { return statement + '!'; };\nvar welcome = _.compose(exclaim, greet);\nwelcome('moe');\n// => 'hi: moe!'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13049,
            "description": "Creates a function that will delay the execution of `func` until after\n`wait` milliseconds have elapsed since the last time it was invoked. Pass\n`true` for `immediate` to cause debounce to invoke `func` on the leading,\ninstead of the trailing, edge of the `wait` timeout. Subsequent calls to\nthe debounced function will return the result of the last `func` call.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to debounce.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The number of milliseconds to delay.",
                    "type": "Number"
                },
                {
                    "name": "immediate",
                    "description": "A flag to indicate execution is on the leading\n edge of the timeout.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Returns the new debounced function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar lazyLayout = _.debounce(calculateLayout, 300);\njQuery(window).on('resize', lazyLayout);"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13097,
            "description": "Executes the `func` function after `wait` milliseconds. Additional arguments\nwill be passed to `func` when it is invoked.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to delay.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The number of milliseconds to delay execution.",
                    "type": "Number"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to invoke the function with.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the `setTimeout` timeout id.",
                "type": "Number"
            },
            "example": [
                "\n\nvar log = _.bind(console.log, console);\n_.delay(log, 1000, 'logged later');\n// => 'logged later' (Appears after one second.)"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13119,
            "description": "Defers executing the `func` function until the current call stack has cleared.\nAdditional arguments will be passed to `func` when it is invoked.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to defer.",
                    "type": "Function"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to invoke the function with.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the `setTimeout` timeout id.",
                "type": "Number"
            },
            "example": [
                "\n\n_.defer(function() { alert('deferred'); });\n// returns from the function before `alert` is called"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13139,
            "description": "Creates a function that, when called, invokes `object[methodName]` and\nprepends any additional `lateBind` arguments to those passed to the bound\nfunction. This method differs from `_.bind` by allowing bound functions to\nreference methods that will be redefined or don't yet exist.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object the method belongs to.",
                    "type": "Object"
                },
                {
                    "name": "methodName",
                    "description": "The method name.",
                    "type": "String"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to be partially applied.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the new bound function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar object = {\n  'name': 'moe',\n  'greet': function(greeting) {\n    return greeting + ' ' + this.name;\n  }\n};\n\nvar func = _.lateBind(object, 'greet', 'hi');\nfunc();\n// => 'hi moe'\n\nobject.greet = function(greeting) {\n  return greeting + ', ' + this.name + '!';\n};\n\nfunc();\n// => 'hi, moe!'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13176,
            "description": "Creates a function that memoizes the result of `func`. If `resolver` is\npassed, it will be used to determine the cache key for storing the result\nbased on the arguments passed to the memoized function. By default, the first\nargument passed to the memoized function is used as the cache key.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to have its output memoized.",
                    "type": "Function"
                },
                {
                    "name": "resolver",
                    "description": "A function used to resolve the cache key.",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the new memoizing function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar fibonacci = _.memoize(function(n) {\n  return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);\n});"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13204,
            "description": "Creates a function that is restricted to one execution. Repeat calls to\nthe function will return the value of the first call.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to restrict.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new restricted function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar initialize = _.once(createApplication);\ninitialize();\ninitialize();\n// Application is only created once."
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13237,
            "description": "Creates a function that, when called, invokes `func` with any additional\n`partial` arguments prepended to those passed to the new function. This method\nis similar to `bind`, except it does **not** alter the `this` binding.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to partially apply arguments to.",
                    "type": "Function"
                },
                {
                    "name": "[arg1,",
                    "description": "arg2, ...] Arguments to be partially applied.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the new partially applied function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar greet = function(greeting, name) { return greeting + ': ' + name; };\nvar hi = _.partial(greet, 'hi');\nhi('moe');\n// => 'hi: moe'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13259,
            "description": "Creates a function that, when executed, will only call the `func`\nfunction at most once per every `wait` milliseconds. If the throttled\nfunction is invoked more than once during the `wait` timeout, `func` will\nalso be called on the trailing edge of the timeout. Subsequent calls to the\nthrottled function will return the result of the last `func` call.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "func",
                    "description": "The function to throttle.",
                    "type": "Function"
                },
                {
                    "name": "wait",
                    "description": "The number of milliseconds to throttle executions to.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Returns the new throttled function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar throttled = _.throttle(updatePosition, 100);\njQuery(window).on('scroll', throttled);"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13309,
            "description": "Creates a function that passes `value` to the `wrapper` function as its\nfirst argument. Additional arguments passed to the new function are appended\nto those passed to the `wrapper` function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Functions"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to wrap.",
                    "type": "Mixed"
                },
                {
                    "name": "wrapper",
                    "description": "The wrapper function.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the new function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar hello = function(name) { return 'hello: ' + name; };\nhello = _.wrap(hello, function(func) {\n  return 'before, ' + func('moe') + ', after';\n});\nhello();\n// => 'before, hello: moe, after'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13341,
            "description": "Converts the characters `&`, `<`, `>`, `\"`, and `'` in `string` to their\ncorresponding HTML entities.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "string",
                    "description": "The string to escape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the escaped string.",
                "type": "String"
            },
            "example": [
                "\n\n_.escape('Moe, Larry & Curly');\n// => \"Moe, Larry &amp; Curly\""
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13359,
            "description": "This function returns the first argument passed to it.\n\nNote: It is used throughout Lo-Dash as a default callback.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "Any value.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns `value`.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar moe = { 'name': 'moe' };\nmoe === _.identity(moe);\n// => true"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13379,
            "description": "Adds functions properties of `object` to the `lodash` function and chainable\nwrapper.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object of function properties to add to `lodash`.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\n_.mixin({\n  'capitalize': function(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n  }\n});\n\n_.capitalize('larry');\n// => 'Larry'\n\n_('curly').capitalize();\n// => 'Curly'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13420,
            "description": "Reverts the '_' variable to its previous value and returns a reference to\nthe `lodash` function.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "return": {
                "description": "Returns the `lodash` function.",
                "type": "Function"
            },
            "example": [
                "\n\nvar lodash = _.noConflict();"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13437,
            "description": "Produces a random number between `min` and `max` (inclusive). If only one\nargument is passed, a number between `0` and the given number will be returned.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "min",
                    "description": "The minimum possible value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "max",
                    "description": "The maximum possible value.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "Returns a random number.",
                "type": "Number"
            },
            "example": [
                "\n\n_.random(0, 5);\n// => a number between 1 and 5\n\n_.random(5);\n// => also a number between 1 and 5"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13467,
            "description": "Resolves the value of `property` on `object`. If `property` is a function\nit will be invoked and its result returned, else the property value is\nreturned. If `object` is falsey, then `null` is returned.",
            "deprecated": true,
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "object",
                    "description": "The object to inspect.",
                    "type": "Object"
                },
                {
                    "name": "property",
                    "description": "The property to get the value of.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the resolved value.",
                "type": "Mixed"
            },
            "example": [
                "\n\nvar object = {\n  'cheese': 'crumpets',\n  'stuff': function() {\n    return 'nonsense';\n  }\n};\n\n_.result(object, 'cheese');\n// => 'crumpets'\n\n_.result(object, 'stuff');\n// => 'nonsense'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13501,
            "description": "A micro-templating method that handles arbitrary delimiters, preserves\nwhitespace, and correctly escapes quotes within interpolated code.\n\nNote: In the development build `_.template` utilizes sourceURLs for easier\ndebugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl\n\nNote: Lo-Dash may be used in Chrome extensions by either creating a `lodash csp`\nbuild and avoiding `_.template` use, or loading Lo-Dash in a sandboxed page.\nSee http://developer.chrome.com/trunk/extensions/sandboxingEval.html",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "text",
                    "description": "The template text.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The data object used to populate the text.",
                    "type": "Obect"
                },
                {
                    "name": "options",
                    "description": "The options object.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns a compiled function when no `data` object\n is given, else it returns the interpolated text.",
                "type": "Function|String"
            },
            "example": [
                "\n\n// using a compiled template\nvar compiled = _.template('hello: <%= name %>');\ncompiled({ 'name': 'moe' });\n// => 'hello: moe'\n\nvar list = '<% _.forEach(people, function(name) { %><li><%= name %></li><% }); %>';\n_.template(list, { 'people': ['moe', 'larry', 'curly'] });\n// => '<li>moe</li><li>larry</li><li>curly</li>'\n\n// using the \"escape\" delimiter to escape HTML in data property values\n_.template('<b><%- value %></b>', { 'value': '<script>' });\n// => '<b>&lt;script></b>'\n\n// using the internal `print` function in \"evaluate\" delimiters\n_.template('<% print(\"Hello \" + epithet); %>.', { 'epithet': 'stooge' });\n// => 'Hello stooge.'\n\n// using custom template delimiter settings\n_.templateSettings = {\n  'interpolate': /\\{\\{([\\s\\S]+?)\\}\\}/g\n};\n\n_.template('Hello {{ name }}!', { 'name': 'Mustache' });\n// => 'Hello Mustache!'\n\n// using the `variable` option to ensure a with-statement isn't used in the compiled template\nvar compiled = _.template('hello: <%= data.name %>', null, { 'variable': 'data' });\ncompiled.source;\n// => function(data) {\n  var __t, __p = '', __e = _.escape;\n  __p += 'hello: ' + ((__t = ( data.name )) == null ? '' : __t);\n  return __p;\n}\n\n// using the `source` property to inline compiled templates for meaningful\n// line numbers in error messages and a stack trace\nfs.writeFileSync(path.join(cwd, 'jst.js'), '\\\n  var JST = {\\\n    \"main\": ' + _.template(mainText).source + '\\\n  };\\\n');"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13660,
            "description": "Executes the `callback` function `n` times, returning an array of the results\nof each `callback` execution. The `callback` is bound to `thisArg` and invoked\nwith one argument; (index).",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "n",
                    "description": "The number of times to execute the callback.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "The function called per iteration.",
                    "type": "Function"
                },
                {
                    "name": "thisArg",
                    "description": "The `this` binding of `callback`.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a new array of the results of each `callback` execution.",
                "type": "Array"
            },
            "example": [
                "\n\nvar diceRolls = _.times(3, _.partial(_.random, 1, 6));\n// => [3, 6, 4]\n\n_.times(3, function(n) { mage.castSpell(n); });\n// => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively\n\n_.times(3, function(n) { this.cast(n); }, mage);\n// => also calls `mage.castSpell(n)` three times"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13694,
            "description": "Converts the HTML entities `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#x27;`\nin `string` to their corresponding characters.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "string",
                    "description": "The string to unescape.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the unescaped string.",
                "type": "String"
            },
            "example": [
                "\n\n_.unescape('Moe, Larry &amp; Curly');\n// => \"Moe, Larry & Curly\""
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13712,
            "description": "Generates a unique id. If `prefix` is passed, the id will be appended to it.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Utilities"
            ],
            "params": [
                {
                    "name": "prefix",
                    "description": "The value to prefix the id with.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns a numeric id if no prefix is passed, else\n a string id may be returned.",
                "type": "Number|String"
            },
            "example": [
                "\n\n_.uniqueId('contact_');\n// => 'contact_104'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13733,
            "description": "Wraps the value in a `lodash` wrapper object.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to wrap.",
                    "type": "Mixed"
                }
            ],
            "return": {
                "description": "Returns the wrapper object.",
                "type": "Object"
            },
            "example": [
                "\n\nvar stooges = [\n  { 'name': 'moe', 'age': 40 },\n  { 'name': 'larry', 'age': 50 },\n  { 'name': 'curly', 'age': 60 }\n];\n\nvar youngest = _.chain(stooges)\n    .sortBy(function(stooge) { return stooge.age; })\n    .map(function(stooge) { return stooge.name + ' is ' + stooge.age; })\n    .first()\n    .value();\n// => 'moe is 40'"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13762,
            "description": "Invokes `interceptor` with the `value` as the first argument, and then\nreturns `value`. The purpose of this method is to \"tap into\" a method chain,\nin order to perform operations on intermediate results within the chain.",
            "static": 1,
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "The value to pass to `interceptor`.",
                    "type": "Mixed"
                },
                {
                    "name": "interceptor",
                    "description": "The function to invoke.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns `value`.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_.chain([1, 2, 3, 200])\n .filter(function(num) { return num % 2 == 0; })\n .tap(alert)\n .map(function(num) { return num * num })\n .value();\n// => // [2, 200] (alerted)\n// => [4, 40000]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13788,
            "description": "Enables method chaining on the wrapper object.",
            "name": "chain",
            "deprecated": true,
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "return": {
                "description": "Returns the wrapper object.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_([1, 2, 3]).value();\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13806,
            "description": "Extracts the wrapped value.",
            "name": "value",
            "memberof": "_",
            "category": [
                "Chaining"
            ],
            "return": {
                "description": "Returns the wrapped value.",
                "type": "Mixed"
            },
            "example": [
                "\n\n_([1, 2, 3]).value();\n// => [1, 2, 3]"
            ],
            "class": ""
        },
        {
            "file": "dist\\debug\\require.js",
            "line": 13824,
            "description": "The semantic version number.",
            "static": 1,
            "memberof": "_",
            "type": "String",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 37,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 50,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 114,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 122,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 132,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 142,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 152,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 163,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 175,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 185,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 199,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 244,
            "description": "The name of the spy, if provided.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 248,
            "description": "Is this Object a spy?",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 252,
            "description": "The actual function this spy stubs.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 257,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 266,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 280,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 296,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 315,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 334,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 354,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 400,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 410,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 428,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 438,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 458,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 476,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 489,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 502,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 512,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 523,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 535,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 547,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 559,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 579,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 618,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 623,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 631,
            "access": "private",
            "tagname": "",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 685,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 723,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 734,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 751,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 758,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 765,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 954,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 985,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1007,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1109,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1186,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1194,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1203,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1212,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotEqual() instead.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1221,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1231,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1240,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1247,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1254,
            "description": "Matcher that compares the actual to null.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1261,
            "description": "Matcher that boolean not-nots the actual.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1269,
            "description": "Matcher that boolean nots the actual.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1277,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1299,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1302,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1326,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1355,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1358,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1375,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1384,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toNotContain() instead.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1402,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1419,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1480,
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1515,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1521,
            "description": "The total count of results",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1525,
            "description": "Number of passed results",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1529,
            "description": "Number of failed results",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1533,
            "description": "Was this suite/spec skipped?",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1537,
            "ignore": "",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1543,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1554,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1562,
            "description": "Getter for the results: message & results.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1569,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1589,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1595,
            "description": "Base class for pretty printing for expectation results.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1602,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1817,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1894,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1933,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1956,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1969,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 1981,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 2137,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 2234,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\jasmine\\vendor\\jasmine.js",
            "line": 2375,
            "class": ""
        },
        {
            "file": "test\\qunit\\vendor\\qunit.js",
            "line": 1,
            "description": "QUnit 1.2.0pre - A JavaScript Unit Testing Framework\n\nhttp://docs.jquery.com/QUnit\n\nCopyright (c) 2011 John Resig, Jörn Zaefferer\nDual licensed under the MIT (MIT-LICENSE.txt)\nor GPL (GPL-LICENSE.txt) licenses.\nPulled Live from Git Mon Oct 31 14:00:02 UTC 2011\nLast Commit: ee156923cdb01820e35e6bb579d5cf6bf55736d4",
            "class": ""
        },
        {
            "file": "test\\qunit\\vendor\\qunit.js",
            "line": 305,
            "description": "Specify the number of expected assertions to gurantee that failed test (no assertions are run at all) don't slip through.",
            "class": ""
        },
        {
            "file": "test\\qunit\\vendor\\qunit.js",
            "line": 312,
            "description": "Asserts true.",
            "example": [
                " ok( \"asdfasdf\".length > 5, \"There must be at least 5 chars\" );"
            ],
            "class": ""
        },
        {
            "file": "test\\qunit\\vendor\\qunit.js",
            "line": 330,
            "description": "Checks that the first two arguments are equal, with an optional message.\nPrints out both actual and expected values.\n\nPrefered to ok( actual == expected, message )",
            "example": [
                " equal( format(\"Received {0} bytes.\", 2), \"Received 2 bytes.\" );"
            ],
            "params": [
                {
                    "name": "Object",
                    "description": "actual"
                },
                {
                    "name": "Object",
                    "description": "expected"
                },
                {
                    "name": "String",
                    "description": "message (optional)"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\qunit\\vendor\\qunit.js",
            "line": 566,
            "description": "Resets the test setup. Useful for tests that modify the DOM.\n\nIf jQuery is available, uses jQuery's html(), otherwise just innerHTML.",
            "class": ""
        },
        {
            "file": "test\\qunit\\vendor\\qunit.js",
            "line": 582,
            "description": "Trigger an event on an element.",
            "example": [
                " triggerEvent( document.body, \"click\" );"
            ],
            "params": [
                {
                    "name": "DOMElement",
                    "description": "elem"
                },
                {
                    "name": "String",
                    "description": "type"
                }
            ],
            "class": ""
        },
        {
            "file": "test\\qunit\\vendor\\qunit.js",
            "line": 1225,
            "description": "jsDump Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com |\nhttp://flesler.blogspot.com Licensed under BSD\n(http://www.opensource.org/licenses/bsd-license.php) Date: 5/15/2008",
            "projectdescription": "Advanced and extensible data dumping for Javascript.",
            "version": "1.0.0",
            "author": "Ariel Flesler",
            "link": "{http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}",
            "class": ""
        }
    ]
}